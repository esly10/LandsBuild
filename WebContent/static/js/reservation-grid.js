ReservationPanel = Ext.extend(Ext.Panel, {
		reservation: null,
		reservation_id:0,
		total_paid: 0,
		total_charges:0,
		load_combo_rooms : null,
		initComponent: function()
	    {
			var panel = this;
			
			if(panel.reservationInfo !== undefined){
				if(panel.reservationInfo.reservation_id !== undefined){
				panel.reservation_id = panel.reservationInfo.reservation_id;
			}
			}
			
			/*
			 html: new Ext.XTemplate("<a href='#'>{value}").apply({
                value: '2. HTML property of a panel generated by an XTemplate'
             })},
			 */
			user = document.getElementById("header-user-text").innerHTML.split('&nbsp;')[0];
			
			currentdate = new Date();
			string_number = "";
			string_number = "F";
			string_number += currentdate.getFullYear();
			string_number += currentdate.getMonth();
			string_number += currentdate.getDate();						  
			string_number += currentdate.getHours();  
			string_number += currentdate.getMinutes(); 
			string_number += currentdate.getSeconds();
			
			var htmlInfo = new Array('<div style="width: 300px; float: left;">','<dl class="list">');													   													   
				htmlInfo.push('<dt style="width: 139px;"><label class="x-form-item">Attended:</label></dt>');
				htmlInfo.push('<dd style="width: 145px;"><label id="user">'+user+'</label></dd>'); // user name													   
			    htmlInfo.push('<dt style="width: 139px;"><label class="x-form-item">Res Number:</label></dt>');
			    htmlInfo.push('<dd style="width: 145px;"><label id="res_number">'+string_number+'</label></dd>'); // Res Number													   
			    htmlInfo.push('<dt style="width: 139px;"><label class="x-form-item">Status:</label></dt>');
			    htmlInfo.push('<dd style="width: 145px;"><label id="status">Confirmmed</label></dd>'); // Status
			    htmlInfo.push('</dl>','</div>');													
			    '<dt class="spacer"></dt>';
			   
			    htmlContent = htmlInfo.join('');
			
			    chargesStore.baseParams = {'reservation_id': panel.reservation_id};
			    chargesStore.load({
            		params:{'reservation_id': panel.reservation_id},
	    			callback: function () {
	    				var taxSum = 0.00;
		        		var servSum = 0.00;
	    				chargesStore.each(function(record,id){
	    					panel.total_charges += parseFloat(record.data.charge_total);
	    					
	    					if(record.data.charge_item_name == "Room" || 
	    					   record.data.charge_item_name == "Room NS" ||
	    					   record.data.charge_item_name == "Restaurant" ||
	    					   record.data.charge_item_name == "Rest/Bar"){
	    						taxSum += (record.data.charge_qty*record.data.charge_rate);
	    					}
	    					/*if(record.data.charge_item_name == "Restaurant" || record.data.charge_item_name == "Rest/Bar"){
	    						servSum += (record.data.charge_qty*record.data.charge_rate);
	    					}*/
			        			        		
			        		
	    				});
	    				
	    				if(taxSum > 1){
	    					if(panel.reservationInfo.reservation_ignore_tax == "1"){
		        			taxSum = (13*taxSum)/100;
	    					}else {
	    						taxSum = 0.00;
	    					}
		        			
		        		}
		        		/*if(servSum > 1){
		        			if(panel.reservationInfo.reservation_ignore_service == "0"){
		        			servSum = (10*servSum)/100;
		        			}else {
		        				servSum = 0.00;
		        			}
		        		}	*/
		        			
	    				 Ext.getCmp("sub_total").setValue(panel.total_charges.toFixed(2));	    		 
	    				//after set sub_total amount sum taxes
	    				panel.total_charges +=  (taxSum+servSum);
		        		
	    	    		 Ext.getCmp("total_changes").setValue(panel.total_charges.toFixed(2));
	    	    		Ext.getCmp("reservation_tax").setValue(Ext.util.Format.number(taxSum, '0.00'));
		        		//Ext.getCmp("services").setValue(Ext.util.Format.number(servSum, '0.00'));
			    
	    	    		 paymentStore.baseParams = {'reservation_id': panel.reservation_id};
	    	    		 paymentStore.load({
	    	            		params:{'reservation_id': panel.reservation_id},
	    			callback: function () {
	    		    				paymentStore.each(function(record2,id2){
	    		    					panel.total_paid += parseFloat(record2.data.amount);
	    		    				});   	
	    		    				 Ext.getCmp("total_paid").setValue(panel.total_paid.toFixed(2));
	    		    				 var bal = parseFloat(panel.total_charges-panel.total_paid);
	    		    				 Ext.getCmp("balance").setValue(bal.toFixed(2));
		            }
	    			    });
		            }
		        });
		
			    //paymentStore.baseParams = {'reservation_id': this.reservation_id};
			    
			panel.loadAgencyPanel();
			panel.loadGuestPanel();
			var config = 
			{
				xtype: 'container',
			    title: 'Reservation',
			    id: 'reservation-main-container',
			    bodyStyle: 'padding-left: 0px; padding-bottom: 0px; background-color: #fff;',
			    padding: 5,
			    style:{
			    	'background-color':' #fff'
			    },
			    autoScroll: true,
			    buttonAlign: 'left',
			    items:[
			           {
					    	layout: 'column',
					    	itemCls: 'itemsFilter',
					    	bodyStyle: 'padding-left: 0px; padding-bottom: 0px; background-color: #fff;',
					    	style:{
						    	border:'0px',
						    	'background-color':' #fff'
						    },
						    border: false,
					    	items: 
					    	[
					    	  { // column #1
					    		columnWidth: .71, 
					    		layout: 'form',
					    		border: false,
					    		id: 'colum1Content',
					    		bodyStyle: 'padding-left: 0px; padding-bottom: 0px; background-color: #fff;',
					    		style:{
							    	'background-color':' #fff'
							    },
					    		items: 
					    		[	
					    		 
					    		 {
								    	layout: 'column',
								    	itemCls: 'itemsFilter',
								    	style:{
									    	border:'0px'
									    },
									    border: false,
									    bodyStyle: 'padding-left: 0px; padding-bottom: 0px; background-color: #fff;',
								    	items: 
								    	[
								    	  { // column #1
								    		columnWidth: .50, 
								    		layout: 'form',
								    		border: false,
								    		id: 'colum1Agency',
								    		bodyStyle: 'padding-left: 0px; padding-bottom: 0px; background-color: #fff;',					    		
								    		items: 
								    		[
												{
													xtype: 'panel',
												    title: '',
												    id: 'agency-panel',
												    padding: 5,
												    style:'padding-left:5px; padding-right:5px; border-left: 0px;border-right: 0px;',
												    bodyCssClass: 'x-citewrite-panel-body',
												    bodyStyle: 'padding-bottom: 0px; background-color: #fff;',
												    autoScroll: true,
												    buttonAlign: 'left',
												    items:[
												           	{
																xtype: 'label',
																text:"Select Agency:",
													               },
															{
																xtype: 'box',
																height: 3
													               },
													               {
																   layout: 'column',
																   layoutConfig: {columns: 2},
																   width: 100,
																   height: 30,
																   defaultType: 'button',
																   items: [{
													            	   
																	   	columnWidth: 0.48,
																      	xtype:'button',
																        width: 50,
																		text: 'Lookup',
																		docked: 'left',
																		handler: function(){																			
																			Ext.Ajax.request({
																				   url: _contextPath + '/agency/list',
																				   success: function(response, opts){
																					   var data = Ext.decode(response.responseText);
																					   if(data.success)
													            	   {
																						   panel.selectAgency(data.agencies);
														            	   
													            	   }
																					   else
																					   {
																						   Ext.Msg.show({
																							   title:'Error!',
																							   msg: data.msg,
																							   buttons: Ext.Msg.OK,
																							   icon: Ext.MessageBox.ERROR
																							});
													               }
																					   
																				   },
																				   failure: function(response, opts){
																					   Ext.Msg.show({
																						   title:'Error!',
																						   msg: 'Error loading Agency information.',
																						   buttons: Ext.Msg.OK,
																						   icon: Ext.MessageBox.ERROR
																						});
																				   },
																				   params: {}
																				});
													          }
																      
																   },
																   {
																	   	
																	   	columnWidth: 0.52,
																		text: 'Add',
																		docked: 'right',
																		style:'padding-left:5px;',
																		handler: function(){
																			
															        		panel.addAgency();
													    	},
																		}]
															},
													
													    	{
																xtype: 'box',
																height: 5
															},
													    	{
																xtype: 'form',
															    title: '',
															    id: 'agency-info',
															    padding: 5,
															    border:false,
															    hidden:true,
															    bodyStyle: 'padding-left: 0px; padding-bottom: 0px; background-color: #fff;',
															    bodyCssClass: 'x-citewrite-panel-body',
															    autoScroll: true,
															    buttonAlign: 'left',
															    items:[
															           {
																		    xtype: 'hidden',
																		    id: 'reservation_agency_id',
																		    name: 'reservation_agency_id',
																		    labelStyle: 'width:125px',
																		    fieldLabel: 'agency_id',	
																		    allowBlank: false,
																		    value:0
																		},
																		{
																		    xtype: 'textfield',
																		    id: 'agency_name',
																		    name: 'agency_name',
																		    anchor:"85%",
																		    labelStyle: 'width:125px',
																		    fieldLabel: 'Agency Name'													    
																		},
																		{
																		    xtype: 'textfield',
																		    id: 'agency_address',
																		    name: 'agency_address',
																		    labelStyle: 'width:125px',
																		    anchor:"85%",
																		    fieldLabel: 'Agency Address'													    
																		},
																		{
																		    xtype: 'textfield',
																		    id: 'agency_phone',
																		    name: 'agency_phone',
																		    labelStyle: 'width:125px',
																		    anchor:"85%",
																		    fieldLabel: 'Agency Phone'													    
																		},
																		{
																		    xtype: 'textfield',
																		    id: 'agency_email',
																		    name: 'agency_email',
																		    labelStyle: 'width:125px',
																		    anchor:"85%",
																		    fieldLabel: 'Agency Email'													    
																		}
															          ],
															          buttons:[]
													    	}
												    ],
												    buttons:  
												    [
												    ]
												}
								    		]
								    	  },
								    	  {// column #2
									    	columnWidth: .50, 
									    	layout: 'form',
									    	border: false,
									    	id: 'colum1Guest',
									    	bodyStyle: 'padding-left: 0px; padding-bottom: 0px; background-color: #fff;',					    		
									    	items: 
									    	[
												{
													xtype: 'panel',
												    title: '',
												    id: 'guest-panel',
												    padding: 5,
												    style:'padding-left:5px; padding-right:5px; border-left: 0px;border-right: 0px;',
												    bodyCssClass: 'x-citewrite-panel-body',
												    autoScroll: true,
												    bodyStyle: 'padding-bottom: 0px; background-color: #fff;',
												    buttonAlign: 'left',
												    items:[
												           	{
																xtype: 'label',
																text:"Select Guest:",
															},
															{
																xtype: 'box',
																height: 3
															},
													        {
																   layout: 'column',
																   layoutConfig: {columns: 2},
																   width: 110,
																   height: 30,
																   defaultType: 'button',
																   items: [{
													        		   													        		   
																	   	columnWidth: 0.48,
																      	xtype:'button',
																        width: 50,
																		text: 'Lookup',
																		docked: 'left',																		
																		handler: function(){
																			
																			/*
														        		   Ext.getCmp('reservation_guest_id').setValue(newValue.data.guest_id);
															        	   Ext.getCmp('guest_phone').setValue(newValue.data.phone);
															        	   Ext.getCmp('guest_email').setValue(newValue.data.email);
															        	   Ext.getCmp('guest_name').setValue(newValue.data.name);
															        	   Ext.getCmp('guest_address').setValue(newValue.data.address);
															        	   Ext.getCmp('guest_type').setValue(newValue.data.type);															        	   
															        	   
															        	   
															        	   Ext.getCmp('guest_type').hide();
															        	   //Ext.getCmp('guest_title').hide();															        	   
														        		   Ext.getCmp('add-guest').hide();*/
													        		   
													        		 													        		   
																			Ext.Ajax.request({
																					url: _contextPath + '/guests/list',
																				   success: function(response, opts){
																					   var data = Ext.decode(response.responseText);
																					   if(data.success)
																					   {
																						   panel.selectGuest(data.guests);
															        	   
																					   }
																					   else
																					   {
																						   Ext.Msg.show({
																							   title:'Error!',
																							   msg: data.msg,
																							   buttons: Ext.Msg.OK,
																							   icon: Ext.MessageBox.ERROR
																							});
														        	   }
													        		   
													               },
																				   failure: function(response, opts){
																					   Ext.Msg.show({
																						   title:'Error!',
																						   msg: 'Error loading Agency information.',
																						   buttons: Ext.Msg.OK,
																						   icon: Ext.MessageBox.ERROR
																						});
																				   },
																				   params: { }
																				});
																			}
																	        	   
																   },
																	        	   
																   {
																	   	columnWidth: 0.52,
																		text: 'Add',
																		docked: 'right',
																		style:'padding-left:5px;',
																		width: 50,
																		handler: function(){
															        		   
																			panel.addGuest();
																		},
																	}]
													    	},
													    	{
																xtype: 'box',
																height: 5
															},
													    	{
																xtype: 'form',
															    title: '',
															    id: 'guests-info',
															    padding: 5,
															    hidden:true,
															    border:false,
															    bodyCssClass: 'x-citewrite-panel-body',
															    bodyStyle: 'padding-left: 0px; padding-bottom: 0px; background-color: #fff;',
															    autoScroll: true,
															    buttonAlign: 'left',
															    items:[
															           {
																		    xtype: 'hidden',
																		    id: 'reservation_guest_id',
																		    name: 'reservation_guest_id',
																		    labelStyle: 'width:135px',
																		    fieldLabel: 'guests_id',		
																		    allowBlank: false,
																		},
																		/*{
																			xtype: 'combo',
																			typeAhead: true,
																		    triggerAction: 'all',
																		    lazyRender:true,
																		    mode: 'local',
																		    id: 'guest_title',
																		    hiddenName: 'guest_title',
																		    labelStyle: 'width:125px',
																		    autoload: true,
																		    store: new Ext.data.ArrayStore({
																		        id: 0,
																		        fields: [
																		            'TittleValue',
																		            'TittleDisplay'
																		        ],
																		        data: [[1, 'Mr'],[2, 'Mrs'],[3, 'Miss'],[4, 'Ms'],[5, 'Master'],[6, 'Family'],[7, 'Other']]
																		    }),
																		    valueField: 'TittleValue',
																		    displayField: 'TittleDisplay',
																		    fieldLabel: 'Tittle',
																		    anchor:"85%",
															                tabIndex: 1,
															                allowBlank: true,
															                forceSelection: true
																		},*/
																		{
																		    xtype: 'textfield',
																		    id: 'guest_name',
																		    name: 'guest_name',
																		    labelStyle: 'width:125px',
																		    anchor:"85%",
																		    fieldLabel: 'Name'													    
																		},
																		{
																		    xtype: 'numberfield',
																		    id: 'guest_phone',
																		    name: 'guest_phone',
																		    labelStyle: 'width:125px',
																		    anchor:"85%",
																		    fieldLabel: 'Home phone'													    
																		},
																		{
																		    xtype: 'textfield',
																		    id: 'guest_address',
																		    name: 'guest_address',
																		    labelStyle: 'width:125px',
																		    anchor:"85%",
																		    fieldLabel: 'Address'													    
																		},
																		{
																		    xtype: 'textfield',
																		    id: 'guest_email',
																		    name: 'guest_email',
																		    labelStyle: 'width:125px',
																		    anchor:"85%",
																		    fieldLabel: 'E-mail'													    
																		},
																		{
																			xtype: 'combo',
																		    typeAhead: true,
																		    triggerAction: 'all',
																		    lazyRender:true,
																		    mode: 'local',
																		    id: 'guest_type',
																		    name: 'guest_type',
																		    hiddenName: 'guest_type',
																		    labelStyle: 'width:125px',
																		    autoload: true,
																		    store: new Ext.data.ArrayStore({
																		        id: 0,
																		        fields: [
																		            'TypeValue',
																		            'TypeDisplay'
																		        ],
																		        data: [[1, 'Guest'],[2, 'Group'],[3, 'Other']]
																		    }),
																		    valueField: 'TypeValue',
																		    displayField: 'TypeDisplay',
																		    fieldLabel: 'Type',
																		    anchor:"85%",
															                tabIndex: 1,
															                allowBlank: true,
															                forceSelection: true
																		}
																		
															          ],
															          buttons:  
																		    []
													    	}
												    ],
												    buttons:  
												    []
												}
									    	]
								    		 
								    	  }
								       ]
					    		    },					    		 
									{
										xtype: 'panel',
									    title: '',
									    id: 'room-panel',
									    padding: 5,
									    style:'padding-left:5px; padding-right:5px; border-left: 0px;border-right: 0px;',
									    bodyCssClass: 'x-citewrite-panel-body',
									    autoScroll: true,
									    buttonAlign: 'left',
									    bodyStyle: 'padding-bottom: 0px; background-color: #fff;',
									    items: 
									    [
											{
												xtype: 'form',
											    title: '',
											    id: 'rooms-info',
											    padding: 5,
											    //hidden:true,
											    border:false,
											    bodyStyle: 'padding-bottom: 0px; background-color: #fff;',
											    bodyCssClass: 'x-citewrite-panel-body',
											    autoScroll: true,
											    buttonAlign: 'left',
											    items:[
													{
														layout: 'column',
												    	itemCls: 'items-rooms',
												    	style:{
													    	border:'0px'
													    },
													    border: false,
													    bodyStyle: 'padding-left: 0px; padding-bottom: 0px; background-color: #fff;',
														items:[
															{
																columnWidth: .20, 
													    		layout: 'form',
													    		border: false,
													    		id: 'colum1Room',
													    		bodyStyle: 'padding-left: 0px; padding-bottom: 0px; background-color: #fff;',
																items: [
																    {
																	    xtype: 'numberfield',
																	    id: 'reservation_rooms_qty',
																	    name: 'reservation_rooms_qty',
																	    width: 30,
																	    listeners: {
																	    	change: function(self,newVal, oldVal){
																	    		if(newVal){
																	    			multiRomms.readOnly= false;
																	    		}
																	    	}
																	    },
																	    fieldLabel: 'Room Qty',
																	    allowBlank: false
																	},
																	{
																	    xtype: 'numberfield',
																	    id: 'reservation_rooms_occupancy',
																	    name: 'reservation_rooms_occupancy',
																	    width: 30,				
																	    readOnly:true,
																	    fieldLabel: 'Occupancy',
																	    allowBlank: false
																	},
																	{
																	    xtype: 'numberfield',
																	    id: 'reservation_guides',
																	    name: 'reservation_guides',
																	    width: 30,																	    
																	    fieldLabel: 'Guides',
																	    allowBlank: false,
																	    listeners:{
																	    	change : function (val){
																	    		var sum = 0;
																	    		if(Ext.getCmp("reservation_children").getValue() != ""){
																	    			sum += Ext.getCmp("reservation_children").getValue();
																	    		}
																	    		if(Ext.getCmp("reservation_guides").getValue() != ""){
																	    			sum += Ext.getCmp("reservation_guides").getValue();
																	    		}
																	    		if(Ext.getCmp("reservation_adults").getValue() != ""){
																	    			sum += Ext.getCmp("reservation_adults").getValue();
																	    		}
																	    		
																	    		Ext.getCmp("reservation_rooms_occupancy").setValue(sum);
																	    		
																	    	}
																	    }
																	}
																]
															},
															{
																columnWidth: .30, 
													    		layout: 'form',
													    		border: false,
													    		id: 'colum2Room',
													    		bodyStyle: 'padding-left: 0px; padding-bottom: 0px; background-color: #fff;',
																items: [
																	{
																	    xtype: 'datefield',
																	    id: 'reservation_check_in',
																	    name: 'reservation_check_in',
																	    fieldLabel: 'Check In',
																		format: 'd/m/Y',
																		submitFormat: 'Y-m-dTH:i:s',
																		submitValue : true,
																		altFormats: 'Y-m-d',
																		anchor: "99.2%",																		
																		allowBlank: false,
																		listeners:{
																	    	change : function(val){
																	    		
																	    		var now = null;
																	    		if(val !== undefined){
																	    			now = val.getValue();
																	    		}else {
																	    			now = Ext.getCmp("reservation_check_in").getValue();
																	    		}
																	    		var days = Ext.getCmp("reservation_nights").getValue();
																	    		if(days != ""){
																	    			now.setDate(now.getDate() + parseInt(days));
																		    		Ext.getCmp("reservation_check_out").setValue(now.toISOString().substring(0, 10));
																	    		}
																	    		
																	    		
																	    		if(Ext.getCmp("reservation_check_out").getValue() != "" && Ext.getCmp("reservation_check_in").getValue() != ""){
																	    			//roomsStore.baseParams = {'reservation_check_out': Ext.getCmp("reservation_check_out").getValue(), 'reservation_check_in': Ext.getCmp("reservation_check_in").getValue()};
																	    			//roomsStore.load();
																	    			
																	    			arrayRoomsStore = new Array();
																    			    roomsStore.load({
																    					params:{'reservation_id': panel.reservation_id, 'reservation_check_out': Ext.getCmp("reservation_check_out").getValue(), 'reservation_check_in': Ext.getCmp("reservation_check_in").getValue()},
																    					callback: function () {
																    						roomsStore.each(function(record,id){
																    							 var dataRoom = new Array(record.data.ROOM_ID.toString(), record.data.ROOM_NO.toString(), record.data.ROOM_TYPE.toString());
																    							arrayRoomsStore.push(dataRoom);
																    						});
																    					
																    						multiRomms.getStore().loadData(arrayRoomsStore);
																    			        }
																    			     });
																	    		}
																	    		
																	    																				    		
																	    	}
																	    }
																		//value: Ext.util.Format.date(data.date, 'Y-m-d')
																	},
																	{
																	    xtype: 'numberfield',
																	    id: 'reservation_adults',
																	    name: 'reservation_adults',
																	    width: 30,
																	    //labelStyle: 'width:135px',
																	    fieldLabel: 'Aduls'	,
																	    allowBlank: false,
																	    listeners:{
																	    	change : function (val){
																	    		var sum = 0;
																	    		if(Ext.getCmp("reservation_children").getValue() != ""){
																	    			sum += Ext.getCmp("reservation_children").getValue();
																	    		}
																	    		if(Ext.getCmp("reservation_guides").getValue() != ""){
																	    			sum += Ext.getCmp("reservation_guides").getValue();
																	    		}
																	    		if(Ext.getCmp("reservation_adults").getValue() != ""){
																	    			sum += Ext.getCmp("reservation_adults").getValue();
																	    		}
																	    		
																	    		Ext.getCmp("reservation_rooms_occupancy").setValue(sum);
																	    		
																	    	}
																	    }
																	},
																	{
																	    xtype: 'numberfield',
																	    id: 'reservation_children',
																	    name: 'reservation_children',
																	    width: 30,																	    
																	    fieldLabel: 'Children',
																	    allowBlank: false,
																	    listeners:{
																	    	change : function (val){
																	    		var sum = 0;
																	    		if(Ext.getCmp("reservation_children").getValue() != ""){
																	    			sum += Ext.getCmp("reservation_children").getValue();
																	    		}
																	    		if(Ext.getCmp("reservation_guides").getValue() != ""){
																	    			sum += Ext.getCmp("reservation_guides").getValue();
																	    		}
																	    		if(Ext.getCmp("reservation_adults").getValue() != ""){
																	    			sum += Ext.getCmp("reservation_adults").getValue();
																	    		}
																	    		
																	    		Ext.getCmp("reservation_rooms_occupancy").setValue(sum);
																	    		
																	    	}
																	    }
																	}
																]
															},
															{
																columnWidth: .25, 
													    		layout: 'form',
													    		border: false,
													    		id: 'colum3Room',
													    		bodyStyle: 'padding-left: 0px; padding-bottom: 0px; background-color: #fff;',
																items: [
																        {
																		    xtype: 'numberfield',
																		    id: 'reservation_nights',
																		    name: 'reservation_nights',
																		    width: 30,
																		    //labelStyle: 'width:135px',
																		    fieldLabel: 'Nights',
																		    allowBlank: false,
																		    listeners:{
																		    	change : function(val){
																		    		var now = Ext.getCmp("reservation_check_in").getValue();
																		    		if(now != ""){
																		    			now.setDate(now.getDate() + parseInt(val.getValue()));
																			    		Ext.getCmp("reservation_check_out").setValue(now.toISOString().substring(0, 10));
																		    		}
																		    		
																		    		if(Ext.getCmp("reservation_check_out").getValue() != "" && Ext.getCmp("reservation_check_in").getValue() != ""){
																		    			//roomsStore.baseParams = {'reservation_check_out': Ext.getCmp("reservation_check_out").getValue(), 'reservation_check_in': Ext.getCmp("reservation_check_in").getValue()};
																		    			//roomsStore.load();
																		    			
																		    			arrayRoomsStore = new Array();
																	    			    roomsStore.load({
																	    					params:{'reservation_id': panel.reservation_id, 'reservation_check_out': Ext.getCmp("reservation_check_out").getValue(), 'reservation_check_in': Ext.getCmp("reservation_check_in").getValue()},
																	    					callback: function () {
																	    						roomsStore.each(function(record,id){
																	    							 var dataRoom = new Array(record.data.ROOM_ID.toString(), record.data.ROOM_NO.toString(), record.data.ROOM_TYPE.toString());
																	    							arrayRoomsStore.push(dataRoom);
																	    						});
																	    						
																	    						multiRomms.getStore().loadData(arrayRoomsStore);
																	    						
																	    			        }
																	    			     });
																		    		}
																		    																				    		
																		    	}
																		    }
																		},
																		{
																			  xtype: 'combo',
																			  hiddenName: 'reservation_meal_plan',
																			  name: 'reservation_meal_plan',
																			  id:'reservation_meal_plan',
																			  fieldLabel: 'Meals Plan',
																			  submitValue: true,
																			  anchor: "99.2%",
																			  listWidth : 300,
																			  lazyRender: false,
																			  store: mealPlanStore,
																			  displayField: 'meal_plan_description',
																			  valueField: 'meal_plan_id',
																				triggerAction: 'all',
																				forceSelection: true,
																				mode: 'local',
																				allowBlank: true
																		}
																]
															},
															{
																columnWidth: .25, 
													    		layout: 'form',
													    		border: false,
													    		id: 'colum4Room',
													    		bodyStyle: 'padding-left: 0px; padding-bottom: 0px; background-color: #fff;',
																items: [
																		{
																		    xtype: 'datefield',
																		    id: 'reservation_check_out',
																		    name: 'reservation_check_out',
																		    fieldLabel: 'Check Out',
																		    format: 'd/m/Y',
																		    submitFormat: 'Y-m-dTH:i:s',
																			submitValue : true,
																			altFormats: 'Y-m-d',
																			anchor: "99.2%",
																			allowBlank: false,
																			listeners:{
																				change: function (val){
																					if(Ext.getCmp("reservation_check_in").getValue() != ""){
																						Ext.getCmp("reservation_nights").setValue(Math.round((Ext.getCmp("reservation_check_out").getValue()-Ext.getCmp("reservation_check_in").getValue())/(1000*60*60*24)));
																					}		
																					
																					if(Ext.getCmp("reservation_check_out").getValue() != "" && Ext.getCmp("reservation_check_in").getValue() != ""){
																						//roomsStore.baseParams = {'reservation_check_out': Ext.getCmp("reservation_check_out").getValue(), 'reservation_check_in': Ext.getCmp("reservation_check_in").getValue()};
																		    			//roomsStore.load();
																		    			
																		    			arrayRoomsStore = new Array();
																	    			    roomsStore.load({
																	    					params:{'reservation_id': panel.reservation_id, 'reservation_check_out': Ext.getCmp("reservation_check_out").getValue(), 'reservation_check_in': Ext.getCmp("reservation_check_in").getValue()},
																	    					callback: function () {
																	    						roomsStore.each(function(record,id){
																	    							 var dataRoom = new Array(record.data.ROOM_ID.toString(), record.data.ROOM_NO.toString(), record.data.ROOM_TYPE.toString());
																	    							arrayRoomsStore.push(dataRoom);
																	    						});
																	    						
																	    						multiRomms.getStore().loadData(arrayRoomsStore);
																	    			        }
																	    			     });
																		    			    
																		    		}
																				}
																			}
																			//value: Ext.util.Format.date(data.date, 'Y-m-d')
																		}				
																]
															}
														]
													},
													{
														xtype: 'box',
														height: 5
													},
													{
														layout: 'column',
														id:"column-rooms",
														bodyStyle: 'padding-left: 0px; padding-bottom: 0px; background-color: #fff;',
													    border: false,
														items:[
															{
																columnWidth: .28, 
													    		layout: 'form',
													    		border: false,
													    		id: 'colum1RoomSelect',
													    		bodyStyle: 'padding-left: 0px; padding-bottom: 0px; background-color: #fff;',
																items: 
																[
																multiRomms = new Ext.ux.form.MultiCombo({
																	  hiddenName: 'reservation_rooms',
																	  name: 'reservation_rooms',
																	  id:'reservation_rooms',
																	  fieldLabel: 'Room(s) No',
																	  allowBlank: false,
																	  readOnly: false,
																	  anchor: "99.2%",			
																	  listeners:{
																	
																		  select :  function(self,newValue,oldValue){
																			  if(self.getValue().split(";").size() > Ext.getCmp("reservation_rooms_qty").getValue()){
																				  
																				  var val = self.getValue().slice(0, self.getValue().lastIndexOf(";"));
																				  self.deselectAll();
																				  self.setComboValue(val);
																				  if(Ext.getCmp("reservation_rooms_qty").getValue() == ""){
																					  alert("Room Qty is required before selecting roms.");
																				  }else {
																				  alert("Maximum Rooms by selecting: "+ Ext.getCmp("reservation_rooms_qty").getValue());
																			  }
																			  
																			  }
																			  
																		  },
																		  "afterRender" : function (){
																			  
																		  }
																	  },
																	  store: new Ext.data.ArrayStore({
																		  autoDestroy: true,
																		  id:"room_store_multi",
																	      fields: [{name: 'id', type: 'string'}, {name: 'description', type: 'string'},{name: 'type', type: 'string'}],
																	      data : arrayRoomsStore
																	    }),
																	    valueField: 'id',
																	    displayField: 'description',																	    
																		triggerAction: 'all'																		
														
																})
															  ]
															}/*,
															{
																columnWidth: .29, 
													    		layout: 'form',
													    		border: false,
													    		id: 'colum2RoomSelect',
													    		bodyStyle: 'padding-left: 0px; padding-bottom: 0px;',
																items: 
																[
															        {
															        	xtype:'button',
															        	style:{
															        		height:'16px'
																	    },
																	    bodyStyle:{
																	    	height:'16px'
																	    },
															        	text: 'Show Occupancy',
															            handler: function(){
															            	panel.showOccupancy(0);
															            }																            
															        }
																]
															}*/															
														]
													}
											     ]
											},
											{
												xtype: 'form',
											    title: '',
											    id: 'event-info',
											    padding: 5,
											    border:false,
											    bodyCssClass: 'x-citewrite-panel-body',
											    bodyStyle: 'padding-bottom: 0px; background-color: #fff;',
											    autoScroll: true,
											    buttonAlign: 'left',
											    items:[
													{
														layout: 'column',
												    	itemCls: 'items-event',
												    	style:{
													    	border:'0px'
													    },
													    border: false,
													    bodyStyle: 'padding-left: 0px; padding-bottom: 0px; background-color: #fff;',
														items:[
															{
																columnWidth: .50, 
													    		layout: 'form',
													    		border: false,
													    		id: 'colum1Event',
													    		bodyStyle: 'padding-left: 0px; padding-bottom: 0px; background-color: #fff;',
																items: [
																    {
																		xtype: 'datefield',
																		id: 'reservation_event_date',
																		name: 'reservation_event_date',
																		fieldLabel: 'Event Date',
																		format: 'd/m/Y',
																		submitFormat: 'Y-m-dTH:i:s',
																		submitValue : true,
																		altFormats: 'Y-m-d',
																		width: 180,
																		//anchor: "90%",
																		allowBlank: false,
																		//value: Ext.util.Format.date(data.date, 'Y-m-d')
																	},
																	{
																    	   xtype: 'numberfield',
																    	   id: 'reservation_event_participants',
																    	   name: 'reservation_event_participants',
																    	   width: 60,																	    
																    	   fieldLabel: 'Participants'													    
																    },
																    {
																    	   xtype: 'numberfield',
																    	   id: 'reservation_event_adult',
																    	   name: 'reservation_adults',
																    	   width: 60,
																    	   labelStyle: 'width:70px !important;',
																    	   style: 'padding:0px;',
																    	   fieldLabel: 'Adult *'													    
																    },
																	/*{
																		layout: 'column',
																    	itemCls: 'items-event',
																    	id:"column_event",
																	    bodyStyle: 'padding-left: 0px; padding-bottom: 0px; background-color: #fff;',
																	    border: false,
																		items:[
																				{ 
																					layout: 'form',
																					border: false,
																					id: 'subcolum1Event',
																					bodyStyle: 'padding-left: 0px; padding-bottom: 0px; background-color: #fff;',
																					items: [
																					   {
																				    	   xtype: 'numberfield',
																				    	   id: 'reservation_event_participants',
																				    	   name: 'reservation_event_participants',
																				    	   width: 30,																	    
																				    	   fieldLabel: 'Participants'													    
																				       }
																					]
																				},
																				{
																					//width: 120, 
																		    		layout: 'form',
																		    		border: false,
																		    		id: 'subcolum2Event',
																		    		bodyStyle: 'padding-left: 10px; padding-bottom: 0px; background-color: #fff;',
																					items: [
																					   {
																				    	   xtype: 'numberfield',
																				    	   id: 'reservation_event_adult',
																				    	   name: 'reservation_event_adult',
																				    	   width: 30,
																				    	   labelStyle: 'width:70px !important;',
																				    	   style: 'padding:0px;',
																				    	   fieldLabel: 'Adult *'													    
																				       }
																					]
																				}
																		]
																	},*/																			
																	{
																		  xtype: 'combo',
																		  hiddenName: 'reservation_meal_plan',
																		  name: 'reservation_meal_plan',
																		  id:'reservation_meal_plan_event',
																		  fieldLabel: 'Meals Plan',
																		  submitValue: true,
																		  //anchor: "90%",
																		  width: 180,
																		  listWidth : 300,
																		  lazyRender: false,
																		  store: mealPlanStore,
																		  displayField: 'meal_plan_description',
																		  valueField: 'meal_plan_id',
																			triggerAction: 'all',
																			forceSelection: true,
																			mode: 'local',
																			allowBlank: true
																	}
																]
															},															
															{
																columnWidth: .25, 
													    		layout: 'form',
													    		border: false,
													    		id: 'colum2Event',
													    		bodyStyle: 'padding-left: 0px; padding-bottom: 0px; background-color: #fff;',
																items: []
															}															
														]
													}
													
											     ]
											}
									    ],
									    buttons:  
									    []
									},
									{
										xtype: 'tabpanel',
					                	activeTab: 0,
					                	id: 'chargesPaymentsTabPanel',
					                	autoScroll: true,
					                	frame: false,
					                	height: 300,
					                	border: false,
					                	style:'padding-left:5px; padding-right:5px; border-left: 0px;border-right: 0px;',
					                	bodyStyle: 'padding-bottom: 0px; background-color: #fff;',
									    items: 
									    [
											{
												xtype: 'panel',
												title: 'Charges',
												id: 'chargesTab',
												style:'padding-left:5px; padding-right:5px; border-left: 0px;border-right: 0px;',
												autoScroll: true,
												buttonAlign:'left',
												bodyStyle: 'padding-bottom: 0px; background-color: #fff;',
												border: false,
												frame: false,
												items: [
														{
															layout: 'column',
															id:"column-charges",
															border: false,
															bodyStyle: 'padding-bottom: 0px; background-color: #fff;',
															items:[
																{
																	columnWidth: .75, 
														    		layout: 'form',
														    		border: false,
														    		id: 'colum1charges',
														    		bodyStyle: 'padding-bottom: 0px; background-color: #fff;',
																	items: panel.loadChargesGrid()
																},
																{
																	columnWidth: .25, 
														    		layout: 'form',
														    		border: false,
														    		id: 'colum2charges',
														    		bodyStyle: 'padding:5px; padding-left: 0px; padding-bottom: 0px; background-color: #fff;',
																	items: 
																	[
																        {
																        	xtype: 'textfield',
																		    id: 'sub_total',
																		    alwaysDisplayDecimals: true,
																		    name: 'sub_total',
																		    labelStyle: 'width:70px',
																		    anchor:"66%",
																		    renderer: 'usMoney',
																		    align: 'right',
																		    readOnly: true,
																		    fieldLabel: 'Sub Total'													    
																		},
																		{
																			layout: 'column',
																			itemCls: 'items-radio_tax',
																			style:{
																				border:'0px'
																			},
																			labelStyle: 'width:70px',
																			border: false,
																			bodyStyle: 'padding-left: 0px; padding-bottom: 0px; background-color: #fff;',
																			items:[
																				{
																					columnWidth: .70, 
																					layout: 'form',
																					border: false,
																					id: 'colum1radioTax',
																					bodyStyle: 'padding-left: 0px; padding-bottom: 0px; background-color: #fff;',
																					items: [
																							{
																		    xtype: 'textfield',
																		    id: 'reservation_tax',
																		    name: 'reservation_tax',
																			anchor:"95%",																					
																								labelStyle: 'width:70px',
																		    value:'0.00',
																		    readOnly: true,
																		    fieldLabel: 'Tax'													    
																							}/*,
																		{
																		    xtype: 'textfield',
																		    id: 'services',
																							    labelStyle: 'width:70px',
																		    name: 'services',
																			anchor:"95%",	
																			readOnly: true,
																		    value:'0.00',
																		    fieldLabel: 'Services'													    
																							}*/
																	]
																				},
																				{
																					columnWidth: .30, 
																					layout: 'form',
																					border: false,
																					id: 'colum2radioTax',
																					bodyStyle: 'padding-left: 0px; padding-bottom: 0px; background-color: #fff;',
																					items: [
																							
																							{
																								 id: 'reservation_ignore_tax',
																								 xtype:'checkbox',
																								 name: 'reservation_ignore_tax',
																								 labelSeparator: '',
																								 hideLabel: true,
																								 boxLabel: 'Included',
																								 fieldLabel: 'Included',
																								 listeners:{
																					        		check: function(self, newVal, oldVal) {																	        			
																					        			if(!newVal){
																					        				Ext.getCmp("reservation_tax").setValue("0.00");
																					        			}
																					        			
																					        			ChargeGrid.fireEvent("click");	
																					        		}
																					        	}
																							}/*,
																							{
																								 id: 'reservation_ignore_service',
																								 xtype:'checkbox',
																								 name: 'reservation_ignore_service',
																								 labelSeparator: '',
																								 hideLabel: true,
																								 boxLabel: 'No Included',
																								 fieldLabel: 'No Included',
																								 listeners:{
																					        		check: function(self, newVal, oldVal) {																	        			
																					        			if(newVal){																					        				
																					        				Ext.getCmp("services").setValue("0.00");
																					        			}
																					        			
																					        			ChargeGrid.fireEvent("click");		
																					        		}
																					        	}
																							}*/
																					]
																				}
																			]
																		}
																	]
																}															
															]
														}
												  ]
											},
											{
												xtype: 'panel',
												title: 'Payments',
												id: 'paymentsTab',
												border: false,
												frame: false,
												bodyStyle: 'padding-bottom: 0px; background-color: #fff;',
												style:'padding-left:5px; padding-right:5px; border-left: 0px;border-right: 0px; background-color: #fff;',
												items: [
												        panel.loadPaymentsGrid()
												        
												]
											}
									    ],
									    buttons:  
									    []
									},
									{
										xtype: 'form',
										title: 'Payment Terms',
										id: 'payment-terms-form',
										style:'padding-left:5px; padding-right:5px; border-left: 0px;border-right: 0px;',
										bodyStyle: 'padding-bottom: 0px; background-color: #fff;',
										autoScroll: true,
										buttonAlign:'left',
										border: false,
										items: [
												{
													xtype: 'box',
													height: 5
												},
												{
													layout: 'column',
													bodyStyle: 'padding-left: 0px; padding-bottom: 0px; background-color: #fff;',
													id:"column-payment-terms",
													border: false,
													items:[
															{
																columnWidth: .75, 
																layout: 'form',
																border: false,
																id: 'colum1Paymentterms',
																bodyStyle: 'padding-left: 0px; padding-bottom: 0px; background-color: #fff;',
																items: 
																[
																	{
														                xtype: 'radiogroup',
														                vertical: true,
														                columns: 3,														                
														                id: 'radio_group_id',
														                listeners: {
														                    render: function(val1, val2) {
														                      new Ext.form.TextField({
															                        id: 'days_advance_field',
															                        width:30,
															                        applyTo: 'days_advance_input', // apply textfield to element whose id is "days_advance_input"
														                      });
														                      
														                      new Ext.form.TextField({
															                        id: 'days_credit_field',
															                        width:30,
															                        applyTo: 'days_credit_input', // apply textfield to element whose id is "days_credit_input"
															                  });
														                      
														                      new Ext.form.TextField({
															                        id: 'instalments_field',
															                        width:30,
															                        applyTo: 'instalments_input', // apply textfield to element whose id is "instalments_input"
															                  });
														                      if(panel.reservationInfo !== undefined){
																					
														                      }
														                    }															
																		},
														                items: [{
																                    boxLabel: 'On Check-In',
																                    name: 'reservation_payment_terms',
																                    //inputValue: 'on_check_out'.
																                    inputValue: 1
																                  
																                },{
																                    boxLabel: 'On Check-Out',
																                    name: 'reservation_payment_terms',
																                    //labelStyle: 'width:100px',																                    
																                    //inputValue: 'on_check_out',
																                    inputValue: 2,
																                },{
													                                xtype: 'radio',
													                                boxLabel: 'Days Advance <input id="days_advance_input" type="text"/>', 
													                                name: 'reservation_payment_terms', 
													                                //labelStyle: 'width:100px',
													                                anchor:"95%",
													                                //inputValue: 'days_advance',
													                                inputValue: 3,
													                                listeners: {
													                                	check: function() {
																	                      // really, check if "on" was clicked
																	                      if(this.checked) {
																	                    	  Ext.defer(function() {
																	                    		  Ext.getCmp('days_advance_field').focus(true, 100);
																	                    	   }, 1);
																	                      } else {
																	                    	  // otherwise, disable the field?
																	                      }
																	                    }
													                                }
													                            },{
													                                xtype: 'radio',
													                                boxLabel: 'Days Credit <input id="days_credit_input" style="margin-left: 5px;" type="text"/>', 
													                                name: 'reservation_payment_terms', 
													                                //labelStyle: 'width:100px',
													                                //inputValue: 'days_credit',
													                                inputValue: 4,
													                                anchor:"95%",
													                                listeners: {
													                                	check: function() {
																	                      // really, check if "on" was clicked
																	                      if(this.checked) {
																	                        Ext.getCmp('days_credit_field').focus();
																	                      } else {
																	                        // otherwise, disable the field?
																	                      }
																	                    }
													                                }
													                            },{
													                                xtype: 'radio',
													                                boxLabel: 'Instalments <input id="instalments_input" type="text"/>', 
													                                name: 'reservation_payment_terms',
													                                anchor:"95%",
													                               // labelStyle: 'width:100px',
													                                //inputValue: 'instalments',
													                                inputValue: 5,
													                                listeners: {
													                                	check: function() {
																	                      // really, check if "on" was clicked
																	                      if(this.checked) {
																	                        Ext.getCmp('instalments_field').focus();
																	                      } else {
																	                        // otherwise, disable the field?
																	                      }
																	                    }
													                                }
													                            },{
																                    boxLabel: 'CPL',
																                    name: 'reservation_payment_terms',
																                   //labelStyle: 'width:100px',
																                    //inputValue: 'cpl',
																                    inputValue: 6
																                    
																                },{
																                    boxLabel: 'Other',
																                    
																                    name: 'reservation_payment_terms',
																                    //labelStyle: 'width:100px',
																                    //inputValue: 'other',
																                    inputValue: 7
																                }
																         ]
														            }
															]
														},
														{
															columnWidth: .25, 
												    		layout: 'form',
												    		border: false,
												    		id: 'colum2paymentterms',
												    		bodyStyle: 'padding-left: 0px; padding-bottom: 0px; background-color: #fff;',
															items: 
															[														      
															    {
														        	xtype: 'textfield',
																    id: 'total_changes',
																    alwaysDisplayDecimals: true,
																    name: 'total_changes',
																    labelStyle: 'width:95px',
																    anchor:"85%",
																    renderer: 'usMoney',
																    align: 'right',
																    readOnly: true,
																    fieldLabel: 'Total Changes'													    
																},
																{
																    xtype: 'textfield',
																    id: 'total_paid',
																    name: 'total_paid',
																    readOnly: true,
																    labelStyle: 'width:80px',
																    anchor:"85%",
																    fieldLabel: 'Total Paid'													    
																},
																{
																    xtype: 'textfield',
																    id: 'balance',
																    name: 'balance',
																    readOnly: true,
																    labelStyle: 'width:80px',
																    anchor:"85%",
																    fieldLabel: 'Balance'													    
																}
															]
														}															
													]
												}]
									}
									
					    		]					    		 
					    	  },
					    	  { // column #2
					    			columnWidth: .29, 
					    			layout: 'form',
					    			height: '100%',
					    			//autoHeight:true,
					    			maxSize: 1200,
					    			id: 'colum2Content',
					    			defaults: {
					    				 'font-size': '12px'
					    			},
					    			style : {
					    				'font-size': '12px'
				                    },
					    			bodyStyle: 'padding-left: 0px; padding-bottom: 0px; border-left: 1px; background-color: #F1F1F1; height: 100%;',
					    			items: 
					    			[
					    				{
											xtype: 'fieldset',
											title: '',
											border: false,
											width:'100%',
											anchor:'100%',
											autoHeight:true,
											bodyStyle: 'padding-left: 0px; padding-bottom: 0px; background-color: #F1F1F1;',
											bodyStyle:'padding:5px; background-color: #F1F1F1;',
											html : htmlContent,
											style:'padding:5px; border-left: 0px;border-right: 0px;',
											id:'fileset-first-info',
											items:[													
												{
													  xtype: 'combo',
													  hiddenName: 'reservation_type',
													  name: 'reservation_type',
													  id:'reservation_type',
													  fieldLabel: 'Res Type',
													  labelStyle: 'width:135px; ',
													  submitValue: true,
													  width:100,
													  lazyRender: false,
													  value:1,
													  store: new Ext.data.ArrayStore({
														  autoDestroy: true,
													      fields: ['id', 'description'],
													      data : [
													              [1, 'FIT'],
													              [2, 'GROUP'],
													              [3, 'EVENT'],
													      ]
													    }),
													    displayField: 'description',
													    valueField: 'id',
														triggerAction: 'all',
														forceSelection: true,
														mode: 'local',
														allowBlank: true,
														listeners: {
															select: function(self, newVal, oldVal){
																var res_number = document.getElementById("res_number").innerHTML;
																var val = self.getValue();
																if(val == 1){
																	val = "F";
																}else if(val == 2){
																	val = "G";
																}else {
																	val = "E";
																}
																res_number = val+res_number.slice(1);
																document.getElementById("res_number").innerHTML = res_number; 
																
																if(self.getValue() == 3){																	
																	Ext.getCmp("event-info").show();
																	Ext.getCmp("rooms-info").hide();
																} else {
																	Ext.getCmp("rooms-info").show();
																	Ext.getCmp("event-info").hide();
																}
															}
														}
												}											      
											],
											listeners:{
												'afterlayout': function(){
													
												},
												'render': function(){
													
												}
											}
										},
										{
											xtype: 'form',
											title: '',
											id: 'notes-form',
											//style:'padding-left:5px; padding-right:5px; border-left: 0px;border-right: 0px;',
											bodyStyle: 'padding-left: 0px; padding-bottom: 0px; background-color: #F1F1F1;',
											autoScroll: true,
											buttonAlign:'left',
											border: false,
											items: 
											[
												{
													xtype: 'fieldset',
													width:'100%',
													anchor:'100%',
													autoHeight:true,
													style:'padding-left:5px; border-left: 0px;border-right: 0px; background-color: #F1F1F1;',
													id:'fileset-notes-info',
													bodyStyle: 'padding-bottom: 0px; background-color: #F1F1F1;',
													title: 'Notes',
												    labelAlign : 'left',
													items:[
															{
															    xtype: 'textfield',
															    id: 'reservation_service_notes',
															    name: 'reservation_service_notes',
															    labelStyle: 'width:115px',
															    anchor: "90%",
															    fieldLabel: 'Service Notes'													    
															},
															{
															    xtype: 'box',
															    height: 15										    
															},
															{
															    xtype: 'textfield',
															    id: 'reservation_transport_notes',
															    name: 'reservation_transport_notes',
															    labelStyle: 'width:115px',
															    anchor: "90%",
															    fieldLabel: 'Transport Notes'													    
															},{
															    xtype: 'box',
															    height: 15										    
															},
															{
															    xtype: 'textfield',
															    id: 'reservation_internal_notes',
															    name: 'reservation_internal_notes',
															    labelStyle: 'width:115px',
															    anchor: "90%",
															    fieldLabel: 'Internal Notes'													    
															},{
															    xtype: 'box',
															    height: 15										    
															},
															{
															    xtype: 'textfield',
															    id: 'reservation_bar_notes',
															    name: 'reservation_bar_notes',
															    labelStyle: 'width:115px',
															    anchor: "90%",
															    fieldLabel: 'MiniBar Notes'													    
															}
													      ]
												}
											]
										},
										{
											xtype: 'panel',
										    title: '',
										    id: 'card-panel',
										    padding: 5,
										    style:'padding:5px; border-left: 0px;border-right: 0px;',
										    bodyCssClass: 'x-citewrite-panel-body',
										    autoScroll: true,
										    bodyStyle: 'padding-left: 0px; padding-bottom: 0px; background-color: #F1F1F1;',
										    buttonAlign: 'left',
										    items:[
											    	{
														xtype: 'form',
													    title: '',
													    id: 'card-info',
													    //padding: 5,
													    border:false,							
													    bodyStyle: 'padding-left: 0px; padding-bottom: 0px; background-color: #F1F1F1;',
													    bodyCssClass: 'x-citewrite-panel-body',
													    autoScroll: true,
													    buttonAlign: 'left',
													    items:[
																{
																    xtype: 'textfield',
																    id: 'card_name',
																    name: 'card_name',
																    anchor: "90%",
																    labelStyle: 'width:115px',
																    allowBlank: false,
																    fieldLabel: 'Name'													    
																},{
																    xtype: 'box',
																    height: 15										    
																},
																{
																    xtype: 'textfield',
																    id: 'card_no',
																    name: 'card_no',
																    labelStyle: 'width:115px',
																    anchor: "90%",
																    allowBlank: false,
																    fieldLabel: 'No'													    
																},{
																    xtype: 'box',
																    height: 15										    
																},
																{
																    xtype: 'textfield',
																    id: 'card_exp',
																    name: 'card_exp',
																    labelStyle: 'width:115px',
																    width:100,
																    allowBlank: false,
																    fieldLabel: 'Exp'													    
																},{
																    xtype: 'box',
																    height: 15										    
																},
																{
																	  xtype: 'combo',
																	  hiddenName: 'card_type',
																	  name: 'card_type',
																	  id:'card_type',
																	  fieldLabel: 'Type',
																	  labelStyle: 'width:115px',
																	  submitValue: true,
																	  width:100,
																	  allowBlank: false,
																	  lazyRender: false,
																	  store:ccTypeStore,
																	    displayField: 'cc_type_description',
																	    valueField: 'cc_type_id',
																		triggerAction: 'all',
																		forceSelection: true,
																		mode: 'local'
																},{
																    xtype: 'box',
																    height: 15										    
																}
													          ]
											    	}
										    ]
										},
										{
											xtype: 'panel',
										    title: '',
										    id: 'radio-panel',
										    padding: 5,
										    style:'padding:5px; border-left: 0px;border-right: 0px;',
										    bodyCssClass: 'x-citewrite-panel-body',
										    bodyStyle: 'padding-left: 0px; padding-bottom: 0px; background-color: #F1F1F1;',
										    autoScroll: true,
										    buttonAlign: 'left',
										    items: 
										    [
												{
													xtype: 'form',
												    title: '',
												    id: 'radio-info',
												    padding: 5,
												    //hidden:true,
												    border:false,
												    bodyCssClass: 'x-citewrite-panel-body',
												    bodyStyle: 'padding-left: 0px; padding-bottom: 0px; background-color: #F1F1F1;',
												    autoScroll: true,
												    buttonAlign: 'left',
												    items:[
														{
															layout: 'column',
													    	itemCls: 'items-radio',
													    	style:{
														    	border:'0px'
														    },
														    border: false,
														    bodyStyle: 'padding-left: 0px; padding-bottom: 0px; background-color: #F1F1F1;',
															items:[
																{
																	columnWidth: .45, 
														    		layout: 'form',
														    		border: false,
														    		id: 'colum1radio',
														    		bodyStyle: 'padding-left: 0px; padding-bottom: 0px; background-color: #F1F1F1;',
																	items: [
																	        {
																	        	xtype: 'checkbox',
																	        	id: 'confirmmed',
																	        	labelStyle: 'width:80px; ',
																	        	width: 90,
																	        	name: 'confirmmed',																	        	
																	        	fieldLabel: 'Confirmmed',
																	        	listeners:{
																	        		check: function(self, newVal, oldVal) {
																	        				if(newVal){
																	        					document.getElementById("status").innerHTML = "Confirmmed";
																	        				Ext.getCmp("canceled").enable();
																	        				Ext.getCmp("check_in_radio").enable();
																	        					Ext.getCmp("canceled").setValue(false);
																	        				Ext.getCmp("no_show_radio").setValue(false);
																	        			}else{
																	        				Ext.getCmp("canceled").disable();
																	        				Ext.getCmp("check_out_radio").disable();
																	        				}
																	        			//if(!Ext.getCmp("check_in_radio").checked){	
																	        			//}
																	        			 
																	        		}
																	        	}
																	        },
																	        {
																	        	xtype: 'checkbox',
																	        	id: 'canceled',
																	        	labelStyle: 'width:80px; ',
																	        	name: 'canceled',
																	        	fieldLabel: 'Canceled',
																	        	disabled: true,
																	        	listeners:{
																	        		check: function(self, newVal, oldVal) {
																	        			if(newVal){
																	        				document.getElementById("status").innerHTML = "Canceled";
																	        				Ext.getCmp("confirmmed").setValue(false);
																	        				Ext.getCmp("check_out_radio").setValue(false);
																	        				Ext.getCmp("check_in_radio").setValue(false);
																	        				Ext.getCmp("no_show_radio").setValue(false);
																	        				Ext.getCmp("confirmmed").enable();
																	        				Ext.getCmp("check_out_radio").disable();
																	        				Ext.getCmp("check_in_radio").disable();
																	        				
																	        			}																	        			 
																	        		}
																	        	}
																	        },
																	        {
																	        	xtype: 'checkbox',
																	        	id: 'check_in_radio',
																	        	disabled: true,
																	        	name: 'check_in',
																	        	fieldLabel: 'Check-In',
																	        	listeners:{
																	        		check: function(self, newVal, oldVal) {
																	        			if(newVal){
																	        				document.getElementById("status").innerHTML = "Check-In";
																	        				Ext.getCmp("canceled").setValue(false);
																	        				Ext.getCmp("check_out_radio").enable();
																	        				Ext.getCmp("no_show_radio").setValue(false);
																	        			}else {																	        																					        				
																		        			document.getElementById("status").innerHTML = "Confirmmed";		
																		        			Ext.getCmp("confirmmed").setValue(true);																		        			
																		        			Ext.getCmp("check_in_radio").setValue(false);
																		        			Ext.getCmp("check_out_radio").setValue(false);
																		        			Ext.getCmp("check_out_radio").disable();
																	        			}
																	        			
																	        		}
																	        	}
																	        }
																	 ]
																},
																{
																	columnWidth: .50, 
														    		layout: 'form',
														    		border: false,
														    		id: 'colum2radio',
														    		bodyStyle: 'padding-left: 0px; padding-bottom: 0px; background-color: #F1F1F1;',
																	items: [
																	        
																	        {
																	        	xtype: 'checkbox',
																	        	id: 'check_out_radio',
																	        	name: 'check_out',
																	        	disabled: true,
																	        	fieldLabel: 'Check-Out',
																	        	listeners:{
																	        		check: function(self, newVal, oldVal) {
																	        			if(newVal){
																	        				document.getElementById("status").innerHTML = "Check-Out";
																	        				Ext.getCmp("canceled").setValue(false);
																	        				Ext.getCmp("canceled").enable();
																	        				Ext.getCmp("no_show_radio").setValue(false);
																	        			}else {
																	        				document.getElementById("status").innerHTML = "Check-In";		
																		        			Ext.getCmp("check_in_radio").setValue(true);
																	        			}																	        			
																	        		}
																	        	}
																	        },
																	        {
																	        	xtype: 'checkbox',
																	        	id: 'no_show_radio',
																	        	name: 'no_show',
																	        	fieldLabel: 'No Show',
																        		listeners:{
																	        		check: function(self, newVal, oldVal) {
																	        			if(newVal){
																	        				document.getElementById("status").innerHTML = "n/a";
																	        				Ext.getCmp("canceled").enable();
																	        				Ext.getCmp("confirmmed").enable();
																	        				
																	        				Ext.getCmp("confirmmed").setValue(false);
																	        				Ext.getCmp("canceled").setValue(false);
																	        				Ext.getCmp("check_in_radio").setValue(false);
																	        				Ext.getCmp("check_out_radio").setValue(false);
																	        			}														        			
																	        		}
																	        	}
																	        }
																	]
																}
															]
														}														
												     ]
												}									    		
										    ]
										},
										{
											xtype: 'panel',
										    title: '',
										    id: 'button-panel',
										    padding: 5,
										    style:'padding:5px; border-left: 0px;border-right: 0px;',
										    bodyCssClass: 'x-citewrite-panel-body',
										    bodyStyle: 'padding-left: 0px; padding-bottom: 0px; background-color: #F1F1F1;',
										    autoScroll: true,
										    border:false,
										    listeners: {
										    	 'afterRender': function() {
										    		 panel.loadDataReservation();
										    		
										         }
										    },
										    buttonAlign: 'left',
										    items: 
										    [/*
												{
													layout: 'column',
											    	itemCls: 'items-radio',
											    	style:{
												    	border:'0px'
												    },
												    border: false,
													items:[
														{
															columnWidth: .25, 
												    		layout: 'form',
												    		border: false,
												    		id: 'colum1button',
												    		bodyStyle: 'padding-left: 0px; padding-bottom: 0px;',
															items: [
															        {
															        	xtype: 'button',
															        	id: 'canceled3',
															        	text: 'Canceled',
															        	width: 90,
															        	name: 'canceled'															        	
															        }
															       
															 ]
														},
														{
															columnWidth: .25, 
												    		layout: 'form',
												    		border: false,
												    		id: 'colum2button',
												    		bodyStyle: 'padding-left: 0px; padding-bottom: 0px;',
															items: [
															        {
															        	xtype: 'button',
															        	id: 'clear3',
															        	text: 'Clear',
															        	width: 90,
															        	name: 'clear'															        	
															        }																	        
															]
														},
														{
															columnWidth: .25, 
												    		layout: 'form',
												    		border: false,
												    		id: 'colum3button',
												    		bodyStyle: 'padding-left: 0px; padding-bottom: 0px;',
															items: [
															        {
															        	xtype: 'button',
															        	id: 'update3',
															        	text: 'Update',
															        	width: 90,
															        	name: 'update'															        	
															        }
															]
														},
														{
															columnWidth: .25, 
												    		layout: 'form',
												    		border: false,
												    		id: 'colum4button',
												    		bodyStyle: 'padding-left: 0px; padding-bottom: 0px;',
															items: [
															        
															        {
															        	xtype: 'button',
															        	id: 'done3',
															        	text: 'Done',
															        	width: 90,
															        	name: 'done'															        	
															        }
															]
														}
													]
												}	*/								    		
										    ]
										}
					    			]
					    			 
					    	  }
					    	]
					    }
			    ],
			    buttons:  
			    [ 
			     {
		        	
		        	id: 'canceled_button',
		        	text: 'Canceled',
		        	width: 90,
		        	name: 'canceled_button',
		        		handler: function(btn, event){
		        			var content = Ext.getCmp('content-panel');
		                	content.update('');
		                	content.removeAll();		        			
		        			content.add(new ReservationPanel());
		        			content.doLayout();
		        			return;
			            }
		         },
		         {
					
					id: 'clear_button',
					text: 'Clear',
					width: 90,
					name: 'clear_button'	,
					handler: function(btn, event){
						var content = Ext.getCmp('content-panel');
	                	content.update('');
	                	content.removeAll();		        			
	        			content.add(new ReservationPanel());
	        			content.doLayout();
	        			return;
		            }
			      },
			      {
			    	id: 'update_button',
		        	text: 'Update',
		        	width: 90,
		        	name: 'update_button',
		        	handler: function(btn, event){
		        		panel.submitReservaion('update');
		            }
			      },
			      {
			        id: 'done_button',
			        text: 'Done',
			        width: 90,
			        name: 'done_button',		
			        handler: function(btn, event){
			        	panel.submitReservaion('done');
			        }
			      },
			      {
				        id: 'print_button',
				        text: 'Print',
				        width: 90,
				        name: 'print_button',
				        hidden: (!panel.reservation_id),
				        handler: function(btn, event){

	                    	var form = Ext.getCmp('citation-update-panel');

	            			var body = Ext.getBody();
	            			var frame = Ext.get('hiddenform-iframe-print-citation');
	            			if(frame != undefined)
	            			{
	            				frame.remove();
	            			}
	            			
	            			frame = body.createChild({
	            		        tag: 'iframe',
	            		        cls: 'x-hidden',
	            		        id: 'hiddenform-iframe-print-reservation',
	            		        name: 'hiddenform-iframe-print-reservation',
	            		        src: _contextPath + "/reservation/print?reservation_id="+ panel.reservation_id
	            		      });    		
	            		
	                    
				        }
			      }
		        ]
			};
			
			Ext.apply(this, Ext.apply(this.initialConfig, config));	        
			ReservationPanel.superclass.initComponent.apply(this, arguments);
	    },
	    
	    loadGuestGrid: function(){

	    	   panel = this;
	    	
	    	   var columnGuestModel = new Ext.grid.ColumnModel({
			        defaults: { sortable: true },
			        columns:[
			                 		{header: 'Name', sortable: true, dataIndex: 'name'},
			       		            {header: 'Address', sortable: true, dataIndex: 'address'},
			       		            {header: 'Phone', sortable: true, dataIndex: 'phone'}	       		         

			       		   ]
			        });
			    
	    	    //grid = this;	
			    var gridGuestPanel = {
			    	xtype: 'grid',
			    	id:"gridGuest",			    		    	
			        store: guestsStore,
			        trackMouseOver:false,
			        disableSelection:false,
			        height:300,
			        frame: false,
			        border: false,	
			        bodyStyle: {
			            padding: '0px'
			        },
			        // grid columns
			        colModel: columnGuestModel,			
			        // customize view config
			        viewConfig: { forceFit:true },			
			        // paging bar on the bottom
			        tbar: {
				    	xtype: 'toolbar',
				    	items: ['Filter: ',
				    	    	{
					           	   xtype: 'combo',
						    	   emptyText:'Type Guest Name',
						    	   fieldLabel: 'Guest',
						    	   name: 'guest_id_search',
						    	   id: 'guest_id_search2',
						    	   hiddenName:'guest_id_search',
							       store: guestsStore,
							       valueField: 'agency_id',
								   displayField: 'agency_name',
						           mode: 'remote',
						           labelStyle: 'width: 75px;',
						           autoSelect: true,
						           selectOnFocus:true,
						           hideTrigger:true,
						           multiSelect:true,
						           typeAhead:true,
						           minChars:1,
						           anchor: '40%',						         
						    	},
						        {
						            iconCls: 'x-tbar-loading'  
						            ,scope: this
						            ,handler: function(){
						            	guestsStore.baseParams = {'query': ""};
						            	guestsStore.setBaseParam('query', "");
						            	guestsStore.load({
						            		  params: {reservation_guest_id: 0}
						            	}) ;
						            	Ext.getCmp("guest_id_search2").setValue("");
						            }
						        } 
				    	        ]
				    },//top tool bar,
				    listeners: {
				    	rowdblclick: function(gridPanel, index, event )
				    	{
				    		var newValue = gridPanel.getStore().getAt(index);
				    		 if(typeof newValue.data == "undefined"){
			        			   Ext.getCmp('guests-info').show();
			        			   Ext.getCmp('reservation_guest_id').setValue(0);													        			   
			        			   Ext.getCmp('guest_type').show();
					        	   //Ext.getCmp('guest_title').show();
				        	   }else {
				        		   Ext.getCmp('reservation_guest_id').setValue(newValue.data.guest_id);
					        	   Ext.getCmp('guest_phone').setValue(newValue.data.phone);
					        	   Ext.getCmp('guest_email').setValue(newValue.data.email);
					        	   Ext.getCmp('guest_name').setValue(newValue.data.name);
					        	   Ext.getCmp('guest_address').setValue(newValue.data.address);
					        	   Ext.getCmp('guest_type').setValue(newValue.data.type);															        	   
					        	   
					        	   
					        	   Ext.getCmp('guest_type').hide();
					        	   //Ext.getCmp('guest_title').hide();															        	   
				        		 
				        	   }
			        		   
			        		   Ext.getCmp('guests-info').show();	
			        		   
			        		   this.findParentByType('window').close();
				    	},
				    	rowcontextmenu: function(gridPanel, index, event ){
				    		GuestListMenu(gridPanel,index,event);
				    	}
				    },
			        loadMask: true
			    };
			    
				var GuestListMenu = function(gridPanel, index, event)
				{
					event.stopEvent();
					var items = new Array({
							text: 'Select',
							handler: function() 
							{
								var newValue = gridPanel.getStore().getAt(index);
								if(typeof newValue.data == "undefined"){
				        			   Ext.getCmp('guests-info').show();
				        			   Ext.getCmp('reservation_guest_id').setValue(0);													        			   
				        			   Ext.getCmp('guest_type').show();
						        	   //Ext.getCmp('guest_title').show();
					        	   }else {
					        		   Ext.getCmp('reservation_guest_id').setValue(newValue.data.guest_id);
						        	   Ext.getCmp('guest_phone').setValue(newValue.data.phone);
						        	   Ext.getCmp('guest_email').setValue(newValue.data.email);
						        	   Ext.getCmp('guest_name').setValue(newValue.data.name);
						        	   Ext.getCmp('guest_address').setValue(newValue.data.address);
						        	   Ext.getCmp('guest_type').setValue(newValue.data.type);															        	   
						        	   
						        	   
						        	   Ext.getCmp('guest_type').hide();
						        	   //Ext.getCmp('guest_title').hide();															        	   
					        		   
					        	   }
				        		   
				        		   Ext.getCmp('guests-info').show();
			        		   
				        		   Ext.getCmp("listWindowSelectGuest").close();
							}
						});
					
					
					var menu = new Ext.menu.Menu(
					{
						items: items
					}).showAt(event.xy);
				};
				
				guestsStore.baseParams = {'query': ""};
            	guestsStore.setBaseParam('query', "");
            	guestsStore.load({
            		  params: {reservation_guest_id: 0}
            	}) ;
		    	  
			    return gridGuestPanel;
	    
	    },
	    loadAgencyGrid: function(){
	    	   panel = this;
	    	
	    	   var columnAgencyModel = new Ext.grid.ColumnModel({
			        defaults: { sortable: true },
			        columns:[
			                 		{header: 'Name', sortable: true, dataIndex: 'agency_name'},
			       		            {header: 'Address', sortable: true, dataIndex: 'agency_address'},
			       		            {header: 'Phone', sortable: true, dataIndex: 'agency_phone'}	       		         

			       		   ]
			        });
			    
	    	    //grid = this;	
			    var gridAgencyPanel = {
			    	xtype: 'grid',
			    	id:"gridAgencies",			    		    	
			        store: agencyStore,
			        trackMouseOver:false,
			        disableSelection:false,
			        height:300,
			        frame: false,
			        border: false,	
			        bodyStyle: {
			            padding: '0px'
			        },
			        // grid columns
			        colModel: columnAgencyModel,			
			        // customize view config
			        viewConfig: { forceFit:true },			
			        // paging bar on the bottom
			        tbar: {
				    	xtype: 'toolbar',
				    	items: ['Filter: ',
				    	    	{
					           	   xtype: 'combo',
						    	   emptyText:'Type Agency Name',
						    	   fieldLabel: 'Agency',
						    	   name: 'agency_id_search',
						    	   id: 'agency_id_search2',
						    	   hiddenName:'agency_id_search',
							       store: agencyStore,
							       valueField: 'agency_id',
								   displayField: 'agency_name',
						           mode: 'remote',
						           labelStyle: 'width: 75px;',
						           autoSelect: true,
						           selectOnFocus:true,
						           hideTrigger:true,
						           multiSelect:true,
						           typeAhead:true,
						           minChars:1,
						           anchor: '40%',						         
						    	},
						        {
						            iconCls: 'x-tbar-loading'  
						            ,scope: this
						            ,handler: function(){
						            
						            	agencyStore.baseParams = {'query': ""};
						            	agencyStore.setBaseParam('query', "");
						            	agencyStore.load({
						            		  params: {reservation_agency_id: 0}
						            	}) ;
						            	
						            	Ext.getCmp("agency_id_search2").setValue("");
						            }
						        } 
				    	        ]
				    },//top tool bar,
				    listeners: {
				    	rowdblclick: function(gridPanel, index, event )
				    	{
				    		var newValue = gridPanel.getStore().getAt(index);
				    		 if(typeof newValue.data == "undefined"){
			        			
			        			 Ext.getCmp('agency_name').setValue(Ext.getCmp("agency_id_search").getRawValue());
			        			 Ext.getCmp('reservation_agency_id').setValue(0);
			        	   }else {
			        		   Ext.getCmp('reservation_agency_id').setValue(newValue.data.agency_id);
			        		   Ext.getCmp('agency_name').setValue(newValue.data.agency_name);
			        		   Ext.getCmp('agency_address').setValue(newValue.data.agency_address);
			        		   Ext.getCmp('agency_phone').setValue(newValue.data.agency_phone);
			        		   Ext.getCmp('agency_email').setValue(newValue.data.agency_email);														        		   
			        		  
			        	   }
		        		   
		        		   Ext.getCmp('agency-info').show();
		        		   this.findParentByType('window').close();
				    	},
				    	rowcontextmenu: function(gridPanel, index, event ){
				    		AgencyListMenu(gridPanel,index,event);
				    	}
				    },
			        loadMask: true
			    };
			    
				var AgencyListMenu = function(gridPanel, index, event)
				{
					event.stopEvent();
					var items = new Array({
							text: 'Select',
							handler: function() 
							{
								var newValue = gridPanel.getStore().getAt(index);
					    		 if(typeof newValue.data == "undefined"){
				        			 
				        			 Ext.getCmp('agency_name').setValue(Ext.getCmp("agency_id_search").getRawValue());
				        			 Ext.getCmp('reservation_agency_id').setValue(0);
				        	   }else {
				        		   Ext.getCmp('reservation_agency_id').setValue(newValue.data.agency_id);
				        		   Ext.getCmp('agency_name').setValue(newValue.data.agency_name);
				        		   Ext.getCmp('agency_address').setValue(newValue.data.agency_address);
				        		   Ext.getCmp('agency_phone').setValue(newValue.data.agency_phone);
				        		   Ext.getCmp('agency_email').setValue(newValue.data.agency_email);														        		   
				        		   
				        	   }
			        		   
			        		   Ext.getCmp('agency-info').show();
			        		   
			        		   Ext.getCmp("listWindowSelectAgency").close();
							}
						});
					
					
					var menu = new Ext.menu.Menu(
					{
						items: items
					}).showAt(event.xy);
				};
				
				agencyStore.baseParams = {'query': ""};
            	agencyStore.setBaseParam('query', "");
            	agencyStore.load({
            		  params: {reservation_agency_id: 0}
            	}) ;
            	
            	
            	
			    return gridAgencyPanel;
	    },	    
	    selectGuest: function (gest){

    		panel = this;
	    	var guestList = {
	    			xtype: 'panel',		    			
	    			//layout: 'form',
	    			title: false,
	    			bodyBorder: false,
	    			border: false,
	    			bodyStyle: {
				            padding: '0px',
				            border: 'none'
				        },
	    			frame: false,
	    			defaultType:'textfield',
	    			bodyStyle: 'padding: 0px, 0px; ',
	    			defaults: { width: '100%' },
	    			items: [panel.loadGuestGrid()]
	    		};
	    	
	    	  			
	    	var guestListPanel = new Ext.form.FormPanel({
	    		xtype: 'form',
	    		id: 'guestListPanel',
	    		border: false,
	    		frame: false,
	    		bodyBorder: false,
	    		autoHeight: true,
	    		items: [{
	    				xtype: 'panel',
	    				autoWidth: true,
	    				 bodyStyle: {
	 			            padding: '0px'
	 			        },
	    				border: false,
	    				frame: false,
	    				deferredRender: false,
	    				defaults: {autoHeight: true, autoScroll: true},
	    				items: [guestList]
	    			}]
	    		});
	    	
	    	var listWindowGuest = new Ext.Window({		         
	            title: "Guest Lookup",
	            id: 'listWindowSelectGuest',
	            width:460,
	            height: 310,
	            plain: true,
	            resizable: false,
	            autoScroll: true,
	            modal: true,
	            items: guestListPanel,		            
	            buttons: [{
	                text: 'Close',
	                handler: function(){
	                	this.findParentByType('window').close();
	                }
	            }]
	        });
	    	listWindowGuest.show();		    	
	    	
	
	    },	    
	    selectAgency:function (agency)
		{
	    		panel = this;
		    	var agencyList = {
		    			xtype: 'panel',		    			
		    			//layout: 'form',
		    			title: false,
		    			bodyBorder: false,
		    			border: false,
		    			bodyStyle: {
					            padding: '0px',
					            border: 'none'
					        },
		    			frame: false,
		    			defaultType:'textfield',
		    			bodyStyle: 'padding: 0px, 0px; ',
		    			defaults: { width: '100%' },
		    			items: [panel.loadAgencyGrid()]
		    		};
		    	
		    	  			
		    	var agencyListPanel = new Ext.form.FormPanel({
		    		xtype: 'form',
		    		id: 'agencyListPanel',
		    		border: false,
		    		frame: false,
		    		bodyBorder: false,
		    		autoHeight: true,
		    		items: [{
		    				xtype: 'panel',
		    				autoWidth: true,
		    				 bodyStyle: {
		 			            padding: '0px'
		 			        },
		    				border: false,
		    				frame: false,
		    				deferredRender: false,
		    				defaults: {autoHeight: true, autoScroll: true},
		    				items: [agencyList]
		    			}]
		    		});
		    	
		    	var listWindow = new Ext.Window({		         
		            title: "Agency Lookup",
		            id: 'listWindowSelectAgency',
		            width:460,
		            height: 310,
		            plain: true,
		            resizable: false,
		            autoScroll: true,
		            modal: true,
		            items: agencyListPanel,		            
		            buttons: [{
		                text: 'Close',
		                handler: function(){
		                	this.findParentByType('window').close();
		                }
		            }]
		        });
		    	listWindow.show();
		    	listWindowGeneral = listWindow;		    	
		    	
		},
	    loadDataReservation : function(){
	    	panel = this;
	    	//Ext.getCmp('event-info').hide();
	    	 
	    	Ext.getCmp("event-info").hide();
	    	if(panel.reservationInfo !== undefined){
		    		var nop = "";
		        
	    		 for (var prop in panel.reservationInfo) {
	    			 if(Ext.getCmp(prop) !== undefined){
	    				 
	    				 if(prop == "reservation_check_in" || prop == "reservation_check_out"){
	    					 //Ext.getCmp(prop).setValue(Ext.util.Format.date(panel.reservationInfo[prop], 'Y-m-d H:i:s')); //2015-11-11 00:00:00 
	    					 Ext.getCmp(prop).setValue(Ext.util.Format.date(panel.reservationInfo[prop], 'd/m/Y')); 
	    				 }else if(prop == "reservation_agency_id"){
	    					agencyStore.load({
	 	    					params:{'reservation_agency_id': panel.reservationInfo[prop]},
	 	    					callback: function () {	 	 
	 	    						
	 	    						Ext.getCmp('reservation_agency_id').setValue(agencyStore.getAt(0).data.agency_id);
	 		    	        		Ext.getCmp('agency_name').setValue(agencyStore.getAt(0).data.agency_name);
	 		    	        		Ext.getCmp('agency_address').setValue(agencyStore.getAt(0).data.agency_address);
	 		    	        		Ext.getCmp('agency_phone').setValue(agencyStore.getAt(0).data.agency_phone);
	 		    	        		Ext.getCmp('agency_email').setValue(agencyStore.getAt(0).data.agency_email);
	 		    	        		   	        		   
	 		    	        		Ext.getCmp('agency-info').show();
	 	    			        }
	 	    			     });	    					
	    	        		   
	    				 }else if(prop == "reservation_guest_id"){
	    					 guestsStore.load({
		 	    					params:{'reservation_guest_id': panel.reservationInfo[prop]},
		 	    					callback: function () {	 			 	    			
		 	    					  
		 	    					   Ext.getCmp('reservation_guest_id').setValue(guestsStore.getAt(0).data.guest_id);
									   Ext.getCmp('guest_phone').setValue(guestsStore.getAt(0).data.phone);
									   Ext.getCmp('guest_email').setValue(guestsStore.getAt(0).data.email);
									   Ext.getCmp('guest_name').setValue(guestsStore.getAt(0).data.name);
									   Ext.getCmp('guest_address').setValue(guestsStore.getAt(0).data.address);														        	   
									   Ext.getCmp('guest_type').setValue(guestsStore.getAt(0).data.type);
									   	   									   
									   Ext.getCmp('guests-info').show();
		 	    			        }
		 	    			     });	 
	    				 }else {
	    					 Ext.getCmp(prop).setValue(panel.reservationInfo[prop]);
	    					
	    				 }
	    				 
	    			 } else {
	    				 if(prop == "reservation_number"){
	    					 document.getElementById("res_number").innerHTML = panel.reservationInfo[prop];
	    				 }else if(prop == "reservation_status"){
								/*
								 '1', 'Confirmed'
								 '2', 'Canceled'
								 '3', 'Check in'
								 '4', 'Check out'
								 '5', 'Open'
								 '6', 'No Show'*/
	    					 	if(panel.reservationInfo[prop] == 1){	
	    							document.getElementById("status").innerHTML = "Confirmmed";	    							
	    							Ext.getCmp("confirmmed").setValue(true);
			        				Ext.getCmp("check_in_radio").enable();
	    						}else if(panel.reservationInfo[prop] == 2){
	    							document.getElementById("status").innerHTML = "Canceled";
	    							Ext.getCmp("canceled").setValue(true);
	    						}else if(panel.reservationInfo[prop] == 3){
	    							document.getElementById("status").innerHTML = "Check-In";
	    							Ext.getCmp("confirmmed").setValue(true);
			        				Ext.getCmp("check_in_radio").setValue(true);
			        				Ext.getCmp("check_in_radio").enable(true);
			        				Ext.getCmp("check_out_radio").enable();
	    						}else if(panel.reservationInfo[prop] == 4){
	    							document.getElementById("status").innerHTML = "Check-Out";	    							
	    							Ext.getCmp("confirmmed").setValue(true);
	    							Ext.getCmp("check_in_radio").setValue(true);
			        				Ext.getCmp("check_out_radio").setValue(true);
			        				Ext.getCmp("check_out_radio").enable(true);
			        				Ext.getCmp("check_in_radio").enable(true);			        				
	    						}else {
	    							document.getElementById("status").innerHTML = "n/a";
	    							Ext.getCmp("no_show_radio").setValue(true);			
	    						}
	    					 
	    				 }else if(prop == "reservation_rooms" ){
	    					 panel.load_combo_rooms = panel.reservationInfo[prop];
		    			 } else if(prop == "reservation_payment_terms"){
		    				 var val = panel.reservationInfo[prop];
		    				 Ext.getCmp("radio_group_id").setValue(panel.reservationInfo[prop]);
		    				 if(val == "3"){		    					 
		    					 Ext.getCmp("days_advance_field").setValue(panel.reservationInfo.reservation_payment_value);
		    				 }else
		    				 if(val == "4"){
		    					 Ext.getCmp("days_credit_field").setValue(panel.reservationInfo.reservation_payment_value);
		    				 }else
		    				 if(val == "5"){
		    					 Ext.getCmp("instalments_field").setValue(panel.reservationInfo.reservation_payment_value);	    					 
		    				 }
		    				 
		    			 }
	    			 }
	    				 
	    		 }	   
	    		 
	    		 if(panel.load_combo_rooms != null && Ext.getCmp("reservation_check_out").getValue() != "" && Ext.getCmp("reservation_check_in").getValue() != ""){
	   				arrayRoomsStore = new Array();
    			    roomsStore.load({
    					params:{'reservation_id': panel.reservation_id, 'reservation_check_out': Ext.getCmp("reservation_check_out").getValue(), 'reservation_check_in': Ext.getCmp("reservation_check_in").getValue()},
    					callback: function () {
    						roomsStore.each(function(record,id){
    							 var dataRoom = new Array(record.data.ROOM_ID.toString(), record.data.ROOM_NO.toString(), record.data.ROOM_TYPE.toString());
    							arrayRoomsStore.push(dataRoom);
    						});
    					
    						multiRomms.getStore().loadData(arrayRoomsStore);
    						multiRomms.setComboValue(panel.load_combo_rooms.split(' ').join(''));
    			        }
    			     });
		    	}

	    		 if(panel.reservationInfo.from_calendar){
	    			 Ext.getCmp("reservation_check_out").fireEvent("change");
	    		 }
	    		 
	    		 if(panel.reservationInfo.reservation_type == 3){																	
					Ext.getCmp("event-info").show();
					Ext.getCmp("rooms-info").hide();
					
					if(panel.reservationInfo.reservation_event_date != null){
						Ext.getCmp("reservation_event_date").setValue(Ext.util.Format.date(panel.reservationInfo.reservation_event_date, 'd/m/Y'));
					}					 
					Ext.getCmp("reservation_event_participants").setValue(panel.reservationInfo.reservation_event_participants);
					Ext.getCmp("reservation_event_adult").setValue(panel.reservationInfo.reservation_adults);
					Ext.getCmp("reservation_meal_plan_event").setValue(panel.reservationInfo.reservation_meal_plan);
					
					
				} else {
					Ext.getCmp("rooms-info").show();
					Ext.getCmp("event-info").hide();
				}
	    	
	    	}
	    	
    		 
	    },
	    isValid: function(){
	    	if(Ext.getCmp("reservation_agency_id").getValue() <= 0){
	   			 Ext.Msg.show({
						   title:'Error!',
						   msg: 'Acengy information are required.',
						   buttons: Ext.Msg.OK,
						   icon: Ext.MessageBox.ERROR
					});
	   			 return false;
	   		}

    		if(Ext.getCmp("reservation_guest_id").getValue() <= 0){
   			 Ext.Msg.show({
					   title:'Error!',
					   msg: 'Guests information are required.',
					   buttons: Ext.Msg.OK,
					   icon: Ext.MessageBox.ERROR
				});
   			 return false;
    		}
    		
    		if(Ext.getCmp("reservation_type").getValue() != 3){
    		if(!Ext.getCmp("rooms-info").getForm().isValid()){
      			 Ext.Msg.show({
   					   title:'Error!',
   					   msg: 'Room information are required.',
   					   buttons: Ext.Msg.OK,
   					   icon: Ext.MessageBox.ERROR
   				});
      			 return false;
       		}
    		}    	
    		
    		if(!Ext.getCmp("radio-info").getForm().isValid()){
    			 Ext.Msg.show({
 					   title:'Error!',
 					   msg: 'Status is required.',
 					   buttons: Ext.Msg.OK,
 					   icon: Ext.MessageBox.ERROR
 				});
    			 return false;
     		}
    		
    		if(!Ext.getCmp("card-info").getForm().isValid()){
   			 Ext.Msg.show({
					   title:'Error!',
					   msg: 'Card information are required.',
					   buttons: Ext.Msg.OK,
					   icon: Ext.MessageBox.ERROR
				});
   			 return false;
    		}
    		
    		if(!Ext.getCmp("payment-terms-form").getForm().isValid()){
      			 Ext.Msg.show({
   					   title:'Error!',
   					   msg: 'Payment Terms are required.',
   					   buttons: Ext.Msg.OK,
   					   icon: Ext.MessageBox.ERROR
   				});
      			 return false;
       		}
    	
    		return true;
    		
	    },
	    submitReservaion: function(type){
	    	
	    	
	    	
	    	var panel = this;
	    	if(type == "done"){
	    		if(Ext.getCmp("reservation_type").getValue() != 3){
	    			if(multiRomms.getValue() == "" && Ext.getCmp("reservation_type").getValue() != 3){
	    				 Ext.Msg.show({
	     					   title:'Error!',
	     					   msg: 'Room(s) are required.',
	     					   buttons: Ext.Msg.OK,
	     					   icon: Ext.MessageBox.ERROR
	     				});
	        			return false;
	    			}else {
	    				var qty = Ext.getCmp("reservation_rooms_qty").getValue();
	    				if(multiRomms.getValue().split(";").size() != qty && Ext.getCmp("reservation_type").getValue() != 3){
	    					Ext.Msg.show({
		     					   title:'Error!',
		     					   msg: 'You need to select '+ qty+' Rom(s)',
		     					   buttons: Ext.Msg.OK,
		     					   icon: Ext.MessageBox.ERROR
		     				});
		        			return false;
	    				}
	    				
	    			}
	    			
		    	} else {
		    		if(!panel.isValid()){
		    			return false;
	    		}    		
	    	}
	    	}
	    	
	    	
	    	var res_number = document.getElementById("res_number").innerHTML;
	    	var status = document.getElementById("status").innerHTML;
			
    		var values = Ext.getCmp("agency-info").getForm().getFieldValues();
    		
    		Ext.apply
    		(
    			values, {'reservation_id': panel.reservation_id}
    		);
    		
    		Ext.apply
    		(
    			values, Ext.getCmp("guests-info").getForm().getFieldValues()
    		);
    		
    		if(Ext.getCmp("reservation_type").getValue() != 3){
    		Ext.apply
    		(
    			values, Ext.getCmp("rooms-info").getForm().getFieldValues()
    		);
	    	}else {
	    		Ext.apply
	    		(
	    			values,  Ext.getCmp("event-info").getForm().getFieldValues()
	    		);
	    	}
    		
    		
    		Ext.apply
    		(
    			values, Ext.getCmp("notes-form").getForm().getFieldValues()
    		);
    		
    		Ext.apply
    		(
    			values, Ext.getCmp("card-info").getForm().getFieldValues()
    		);
    		
    		Ext.apply
    		(
    			values, Ext.getCmp("radio-info").getForm().getFieldValues()
    		);		        			

			Ext.getCmp("colum1charges").items.item(0).store;
			Ext.getCmp("colum1charges").items.item(0).store.getCount();
		
			var val = "";
			if(Ext.getCmp("days_advance_field").getValue() != ""){
				val = Ext.getCmp("days_advance_field").getValue();
				
			}else if(Ext.getCmp("days_credit_field").getValue() != ""){
				val = Ext.getCmp("days_credit_field").getValue();
				
			}else if(Ext.getCmp("instalments_field").getValue() != ""){
				val = Ext.getCmp("instalments_field").getValue();
			}
			
			
			if(Ext.getCmp("payment-terms-form").getForm().getFieldValues().radio_group_id != null){
			Ext.apply
    		(
    			values, 
    			{'reservation_payment_terms' :Ext.getCmp("payment-terms-form").getForm().getFieldValues().radio_group_id.inputValue},
    			{'reservation_payment_value': val}	        			
    		);
			}
			
			Ext.apply
    		(
    			values, 			        			
    			{'reservation_type': Ext.getCmp("reservation_type").getValue()},
    			{'reservation_tax': Ext.getCmp("reservation_tax").getValue()}
    		);
			
			Ext.apply
    		(
    			values, 
    			{'reservation_number': res_number},
    			{'reservation_status': status}  			
			
    		);
			
			
			Ext.apply
    		(
    			values,     			
    			{'reservation_ignore_tax':  Ext.getCmp("reservation_ignore_tax").getValue()},
    			//{'reservation_ignore_service':  Ext.getCmp("reservation_ignore_service").getValue()},
    			{'reservation_tax':  Ext.getCmp("reservation_tax").getValue()}
    			//{'services':  Ext.getCmp("services").getValue()}
			
    		);
			
			Ext.Ajax.request({
			    url: _contextPath + '/reservation/save',
			    method : "POST",
			    /*headers: {
			        'Content-Type': 'application/json'
			    },*/
			    params : values,
			    //jsonData: true,
			  //  useDefaultXhrHeader : false,
			   // withCredentials: true,                
			    success : function(response) {
			    	var data = Ext.decode(response.responseText);
					if(data.success)
					{																	
						panel.reservation_id = data.reservation_id;
						panel.submitCharges(data.reservation_id);
						Ext.growl.message('Success!', 'Reservation has been saved.');
						
						if(type == "done"){
							var content = Ext.getCmp('content-panel');
							content.removeAll(true);						
							content.add(new ReservationListPanel());
							content.doLayout();
							return;
						}
					
					}
			        
			    },
			    failure : function(response) {
			        var respObj = Ext.JSON.decode(response.responseText);
			        Ext.Msg.alert("Error", respObj.status.statusMessage);
			    }
			});

			//************Colum 2***********//
			
			//Ext.getCmp("res_type").getValue();

			
			
			/*Colum 1:
			Ext.getCmp("agency_id_search").getValue()
			Ext.getCmp("agency-info").getForm()
			
			
			Ext.getCmp("guests_id_search").getValue()
			Ext.getCmp("guests-info").getForm()
			
			Ext.getCmp("rooms-info").getForm()
			
			
			Ext.getCmp("colum1charges").items.item(0).store
			Ext.getCmp("colum1charges").items.item(0).store.getCount()
			paymentsTab ...
			
			Ext.getCmp("payment-terms-form").getForm()
			Ext.getCmp("days_advance_field"), Ext.getCmp("days_credit_input, "), Ext.getCmp("instalments_input")
			
			***********************
			
			Colum 2:
			Ext.getCmp("res_type").getValue()
			
			Ext.getCmp("notes-form").getForm()
			
			Ext.getCmp("card-info").getForm()
			
			Ext.getCmp("radio-info").getForm()
			*/
	    },
	    loadCharges: function(){
	    	if(panel.reservation_id > 0){
	    		ChargeGrid.getStore().load({params:{'reservation_id': panel.reservation_id}});
	    	}
	    	
	    },
	    submitCharges: function(res_id){
	    	panel = this;
	    	if(res_id <= 0 ){
	    		Ext.growl.message('Error!', 'You must save the reservation information before save a charges.');
	    		return false;
	    	}
	    	var data = {};
	    	ChargeGrid.getStore().each(function(record,id){
	    	  
	    		   data.charge_id 		 =  record.get("charge_id");
	    		   data.charge_reservation_id = res_id;	    		   
		    	   data.charge_item_name = record.get("charge_item_name");
		    	   data.charge_item_desc =  record.get("charge_item_desc");
		    	   data.charge_qty		 =  record.get("charge_qty");
		    	   data.charge_rate		 =  record.get("charge_rate");
		    	   data.charge_total	 =  record.get("charge_total");
		    	   data.charge_folio 	 = record.get("charge_folio");
		    	   data.unique_id 	 	 = record.get("unique_id");
		    	     
		    	   if(data.unique_id == ""){
		    		   data.unique_id = panel.uniqueID();
		    	   }
		    	     
		    	   Ext.Ajax.request({params: data,url: _contextPath + '/reservation/saveCharges',failure: function(response, opts){ return false;}});
	    	   
	    	});
	    	
	    	
	    	
	    	/*
	    	Ext.getCmp("colum1charges").items.item(0).store.data.items
	    	
	    	Ext.Ajax.request({
	    		  url : 'doSomething.htm',
	    		  method: 'POST',
	    		  headers: { 'Content-Type': 'application/json' },                     
	    		  params : { "charge_reservation_id" : id },
	    		  jsonData: Ext.getCmp("colum1charges").items.item(0).store,
	    		  /*jsonData: {
	    		      "username" : "admin",
	    		      "emailId" : "admin@sivalabs.com"
	    		  },*/
	    		 /* success: function (response) {
	    		      var jsonResp = Ext.util.JSON.decode(response.responseText);
	    		      Ext.Msg.alert("Info","UserName from Server : "+jsonResp.username);
	    		  },
	    		  failure: function (response) {
	    		      var jsonResp = Ext.util.JSON.decode(response.responseText);
	    		      Ext.Msg.alert("Error",jsonResp.error);
	    		  }
	    		});*/
	    },
	    formatDate: function formatDate(value){
	    	var panel = this;
            return value ? value.dateFormat('M d, Y') : '';
        },
        
        showPaymentWindow : function (data){
        	var panel = this;
        	
	    	var formPanel = new Ext.form.FormPanel({
	    		bodyBorder: false,
	    		id:'formPayment',
	    		border: false,
	    		frame: false,
	    		padding: '10px',
	    		bodyCssClass: 'x-citewrite-panel-body',
	    		items: [
	    		        
						{
							layout: 'column',
							id:"column-charges",
							border: false,
							items:[
								{
									columnWidth: .50, 
						    		layout: 'form',
						    		border: false,
						    		id: 'colum1charges',
						    		bodyStyle: 'padding-left: 0px; padding-bottom: 0px; background-color: #fff;',
									items: [
											{
												xtype: 'hidden',
												id: 'payment_id',
												name: 'payment_id',
												value: 0
											},
											{
												xtype: 'hidden',
												id: 'reservation_id',
												name: 'reservation_id',
												value: 0
											},
											{
											    xtype: 'datefield',
											    id: 'payment_date',
											    name: 'payment_date',
											    fieldLabel: 'Payment Date',
												format: 'd/m/Y',
												submitFormat: 'Y-m-dTH:i:s',
												submitValue : true,
												width: 135,			
												labelStyle: 'width:120px',
												allowBlank: false,
												listeners:{}
												//value: Ext.util.Format.date(data.date, 'Y-m-d')
											},
											{
											    xtype: 'datefield',
											    id: 'receive_date',
											    name: 'receive_date',
											    fieldLabel: 'Receive Date',
												format: 'd/m/Y',
												submitFormat: 'Y-m-dTH:i:s',
												submitValue : true,
												width: 135,		
												labelStyle: 'width:120px',
												allowBlank: false,
												listeners:{}
												//value: Ext.util.Format.date(data.date, 'Y-m-d')
											},
											{
												xtype: 'combo',
												typeAhead: true,
											    triggerAction: 'all',
											    lazyRender:true,
											    mode: 'local',
											    id: 'payment_method',
											    hiddenName: 'payment_method',
											    labelStyle: 'width:120px',
											    width: 135,	
											    autoload: true,
											    store:paymentMethodStore,
											    valueField: 'payment_method_id',
											    displayField: 'payment_method_description',
											    fieldLabel: 'Payment Method',
											    width: 135,
											    tabIndex: 1,
											    allowBlank: false,
											    forceSelection: true
											},
											{
											    xtype: 'numberfield',
											    id: 'transaction_no',
											    name: 'transaction_no',
											    width: 135,
											    allowBlank: false,
											    labelStyle: 'width:120px',
											    fieldLabel: 'Transaction No'													    
											},
											{
											    xtype: 'numberfield',
											    id: 'amount',
											    name: 'amount',
											    allowBlank: false,
											    width: 135,		
											    labelStyle: 'width:120px',
											    fieldLabel: 'Amount'													    
											}
											
									]
								},
								{
									columnWidth: .50, 
						    		layout: 'form',
						    		border: false,
						    		id: 'colum2charges',
						    		bodyStyle: 'padding:5px; padding-left: 0px; padding-bottom: 0px; background-color: #fff;',
									items: 
									[
										
										
										{
											xtype: 'combo',
											typeAhead: true,
										    triggerAction: 'all',
										    lazyRender:true,
										    mode: 'local',
										    id: 'back_account',
										   
										    width: 135,	
										    hiddenName: 'back_account',
										    //labelStyle: 'width:125px',
										    autoload: true,
										    store: new Ext.data.ArrayStore({
										        id: 0,
										        fields: [
										            'TittleValue',
										            'TittleDisplay'
										        ],
										        data: [
										               [1, 'back_account 1'],
										               [2, 'back_account 2'],
										               [3, 'back_account 3'],
										               ]
										    }),
										    valueField: 'TittleValue',
										    displayField: 'TittleDisplay',
										    fieldLabel: 'Back Account',											   
										    tabIndex: 1,
										    allowBlank: false,
										    forceSelection: true
										},
										{
											xtype: 'combo',
											typeAhead: true,
										    triggerAction: 'all',
										    lazyRender:true,
										    mode: 'local',
										    id: 'bill_to',
										    width: 135,	
										    hiddenName: 'bill_to',
										    //labelStyle: 'width:125px',
										    autoload: true,
										    store: new Ext.data.ArrayStore({
										        id: 0,
										        fields: [
										            'TittleValue',
										            'TittleDisplay'
										        ],
										        data: [
										               ['Guest', 'Guest'],
										               ['Agency', 'Agency']
										               ]
										    }),
										    valueField: 'TittleValue',
										    displayField: 'TittleDisplay',
										    fieldLabel: 'Bill To',
										 
										    tabIndex: 1,
										    allowBlank: false,
										    forceSelection: true
										},
										{
										    xtype: 'textarea',
										    id:"payment_notes",
										    name:'payment_notes',
										    width: 180,		
										    fieldLabel: 'Payment Notes',
										    labelAlign:'top'
										} 
									]
								}															
							]
						}
	    		        
						
	    		]
	    	});
	      
	    	var title = "Receive Payment";	    	
	    	
	    	var paymentWindow = new Ext.Window({
	            renderTo: document.body,
	            title: title,
	            plain: true,
	            resizable: true,
	            autoScroll: true,
	            modal: true,
	            id: 'paymentWindow',
	            items: formPanel,
	            buttons: [{
	                text:'Accept',
	                handler: function()
	                {   
	                	if(panel.reservation_id <= 0){
	                		Ext.growl.message('Error!', 'You must save the reservation information before making a payment.');
	                		return false;
	                	}
	                	
	                	if(!Ext.getCmp('formPayment').getForm().isValid()){
	                		Ext.Msg.show({
	 						   title:'Error!',
	 						   msg: 'information are required.',
	 						   buttons: Ext.Msg.OK,
	 						   icon: Ext.MessageBox.ERROR
	                		});
	                		return false;
	                	}
	                	//validate form	                	
	                	Ext.getCmp('formPayment').getForm().submit({
	                	    url: _contextPath + '/payments/save',
	                	    scope: this,
	                	    params: {transaction_id: 1, 'reservation_id': panel.reservation_id }, //panel.transaction_id  FIX
	                	    success: function(form, action) {
	                	    	var parent = action.options.scope.findParentByType('window'); 

	                	    	paymentStore.load({
		    	            		params:{'reservation_id': panel.reservation_id},
		    		    			callback: function () {
		    		    				
			                	    	Ext.growl.message('Success', 'Payment has been updated.');
			                	    	var sum = 0.00;
		    		    				paymentStore.each(function(record,id){
			    	    					sum += record.data.amount;
			    	    				});
		    		    				
		    		    				var balance = Ext.util.Format.number((parseFloat(Ext.getCmp("total_changes").getValue()) - parseFloat(sum)), '0.00');
		    		    				Ext.getCmp("total_paid").setValue(Ext.util.Format.number(parseFloat(sum), '0.00'));
		    		    				Ext.getCmp("balance").setValue(balance);			    		        		
	                	    	parent.close();	                	       
		    		    				 
		    			            }
	                	    	});
	                	  	
	                	    },
	                	    failure: function(form, action) {
	                	        switch (action.failureType) {
	                	            case Ext.form.Action.CLIENT_INVALID:
	                	                Ext.Msg.show({
                	                	   title:'Error',
                	                	   msg: 'Please enter all information.',
                	                	   buttons: Ext.Msg.OK,
                	                	   icon: Ext.MessageBox.ERROR
                	                	});
	                	                break;
	                	            case Ext.form.Action.CONNECT_FAILURE:
	                	                Ext.Msg.show({
                	                	   title:'Failure',
                	                	   msg: 'Ajax communication failed.',
                	                	   buttons: Ext.Msg.OK,
                	                	   icon: Ext.MessageBox.ERROR
                	                	});
	                	                break;
	                	            case Ext.form.Action.SERVER_INVALID:
	                	               Ext.Msg.show({
                	                	   title:'Failure',
                	                	   msg: action.result.msg,
                	                	   buttons: Ext.Msg.OK,
                	                	   icon: Ext.MessageBox.ERROR
                	                	});
	                	                break;
	                	       }
	                	    }
	                	});
	                }
	            },{
	                text: 'Cancel',
	                handler: function(){
	                	this.findParentByType('window').close();
	                }
	            }],
				width: 650,
                height: 250,
				listeners : {
					resize: function(obj,width, height){},
					afterrender: function(obj)	{}				
				}
	        });
	    	
	    	paymentWindow.show();
	    	paymentWindow.center();
	    
	    	if(data != null){
	    		$jQuery.each( data, function( key, value ) {
	    			if(key == 'payment_date' || key == 'receive_date'){
	    				Ext.getCmp(key).setValue(Ext.util.Format.date(value, 'd/m/Y'));
	    			}else {
	    				if(Ext.getCmp(key) !== undefined){
	    					Ext.getCmp(key).setValue(value);
	    				} 
	    			}
				  
				});
	    	}
	    
        },
        loadPaymentsGrid: function(){
	    	 var panel = this;
	    	 var paymentGridPanel = null;
	    	 var payentsColumnModel = null;
	    	 var toolbar = null;
	    	 
	    	  payentsColumnModel = new Ext.grid.ColumnModel({
			       defaults: { sortable: true, flex: 1 },
			       width: '100%',
			       viewConfig: { forceFit:true },
			       columns:[
			                   {header: 'ID', sortable: true, dataIndex: 'payment_id', autoSizeColumn : true},
					           {header: 'Reservation ID', sortable: true, dataIndex: 'reservation_id', autoSizeColumn : true},	
					           {header: 'Payment Date', sortable: true, dataIndex: 'payment_date', autoSizeColumn : true},
					           {header: 'Payment Method', sortable: true, dataIndex: 'payment_method_description',  autoSizeColumn : true},
					           {header: 'Receive Date', sortable: true, dataIndex: 'receive_date',  autoSizeColumn : true},
					           {header: 'Transaction No', sortable: true, dataIndex: 'transaction_no',  autoSizeColumn : true},
					           {header: 'Amount', sortable: true, dataIndex: 'amount',  autoSizeColumn : true},
					           {header: 'Folio', sortable: true, dataIndex: 'bill_to',  autoSizeColumn : true}
			                ]
			    });
			    	      
	    	    toolbar = {
	    	            pageSize: 100,
	    	            store: paymentStore,
	    	            displayInfo: true,
	    	            defaults: { flex: 1 },
	    	            viewConfig: { forceFit:true },
	    	            displayMsg: 'Displaying Payments {0} - {1} of {2}',
	    	            emptyMsg: "No Payments to display"
	    	    };
	    	    
	    	    toolbar.items = [
                '-',	                
                {
	                text: 'New Pay',
	                cls: 'x-btn-text details',
	                handler: function(btn, event){ 
	                	panel.showPaymentWindow();
	                }
	             }];
	    	  
	    	   paymentGridPanel = new Ext.grid.GridPanel({
			    	title: '',			    	
			    	id:"paymentsGridPanel",
			       // trackMouseOver:false,
			       // disableSelection:false,
			        //height:200,
			        store: paymentStore,
			        frame: true,			       	    	    	
			        // grid columns
			        colModel: payentsColumnModel,			        
			        anchor: "99.8%",
		            height: 230,
		            //autoExpandColumn: 'item_name', // column with this id will be expanded
		           
		            frame: true,
		            bodyBorder: false,
		    		border: false,		    
			        // customize view config
			        viewConfig: { forceFit:true },
			        bbar: new Ext.PagingToolbar(toolbar),
			        listeners: {'rowcontextmenu': panel.showContextMenuPayment,
						'rowdblclick': function(grid, index, event)
						{
			        			return;
								
						}, scope: this }
			        // paging bar on the bottom
			    });
			    			    
	    	   return paymentGridPanel;
        },
        showContextMenuPayment: function(grid, index, event)    	{
    		event.stopEvent();
    		var panel = this;
    		var record = grid.getStore().getAt(index);
    		
    		var items = new Array({
    					text: 'Edit',
    					handler: function() 
    					{    						
    						//panel.details(record.data);
    						panel.showPaymentWindow(record.data);
    					}
    				});
    		
    		/*if(hasPermission(PL_CITATION_MANAGE) || (hasPermission(PL_OWNER_MANAGE) && panel.owner.owner_id > 0))
    		{
    			items.push({
    					text: 'Edit',
    					handler: function() 
    					{
    						panel.editCitation(record.data.citation_id);
    					}
    				});
    			
    		}*/	
    		/*
    		if(hasPermission(PL_ADMIN))
    		{
    			items.push({
    				text: 'Delete',
    				handler: function() 
    				{
    					panel.deleteCitation(record.data);
    				}
    			});
    			
    		}		*/

    		new Ext.menu.Menu(
    		{
    			items: items,
    			autoDestroy: true
    		}).showAt(event.xy);
    	},
	    loadChargesGrid: function(){
	    	
	    	var panel = this;
	        /**
	         * Handler specified for the 'Available' column renderer
	         * @param {Object} value
	         */
	        /*function formatDate(value){
	            return value ? value.dateFormat('M d, Y') : '';
	        }*/

	        // shorthand alias
	        var fm = Ext.form;

	        // the column model has information about grid columns
	        // dataIndex maps the column to the specific data field in
	        // the data store (created below)
	        var cm = new Ext.grid.ColumnModel({
	            // specify any defaults for each column
	            defaults: {
	                sortable: true // columns are not sortable by default           
	            },
	            columns: [{
	                id: 'charge_id',
	                header: 'ID',
	                dataIndex: 'charge_id',
	                anchor: "16%",
	                // use shorthand alias defined above
	                hidden:true
	            },{
	                id: 'charge_reservation_id',
	                header: 'Res ID',
	                dataIndex: 'charge_reservation_id',
	                anchor: "16%",
	                // use shorthand alias defined above
	                hidden:true
	            },{
	                id: 'charge_item_name',
	                header: 'Item Name',
	                dataIndex: 'charge_item_name',
	                anchor: "16%",
	                // use shorthand alias defined above
	                editor: new fm.ComboBox({
						  lazyRender: false,
						  store: new Ext.data.ArrayStore({
							  autoDestroy: true,
						      fields: ['id', 'description'],
						      data : [
						              ['Room', 'Room'],
						              ['Restaurant', 'Restaurant'],
						              ['Rest/Bar', 'Rest/Bar'],
						              ['Activity', 'Activity'],
						              ['Tour', 'Tour'],
						              ['Transportation', 'Transportation'],
						              ['Car Rent', 'Car Rent'],
						              ['Hotel Facilities', 'Hotel Facilities'],
						              ['Room NS', 'Room NS'],
						              ['Other', 'Other'],
						      ]
						    }),
						    displayField: 'description',
						    valueField: 'id',
							triggerAction: 'all',
							forceSelection: true,
							mode: 'local',
							allowBlank: true
	                })
	            },{
	                id: 'charge_item_desc',
	                header: 'Item Desc',
	                dataIndex: 'charge_item_desc',
	                anchor: "30%",
	                // use shorthand alias defined above
	                editor: new fm.TextField({
	                    allowBlank: false
	                })
	            },{
	                id: 'charge_qty',
	                header: 'Qty',
	                dataIndex: 'charge_qty',
	                anchor: "11%",
	                // use shorthand alias defined above
	                editor: new fm.NumberField({
	                    allowBlank: false,
	                    allowNegative: false,
	                    maxValue: 10000
	                })
	            },{
	            	id:'charge_rate',
	                header: 'Rate',
	                dataIndex: 'charge_rate',
	                anchor: "11%",
	                align: 'right',
	                renderer: 'usMoney',
	                editor: new fm.NumberField({
	                    allowBlank: false,
	                    allowNegative: false,
	                    maxValue: 100000,
	                    listeners:{
	                    	edit : function(self,newValue,oldValue){
				        		  /*self.gridEditor.col;
				        		   self.gridEditor.row;
				        		    var sm = articlesListGrid.getSelectionModel().getSelected();
				        		   */				        		   
				        		   /*var sm = ChargeGrid.getSelectionModel().selection.record;
				        		   sm.set('charge_total',newValue);
				        		   panel.calculateSubTotal(ChargeGrid);*/
				        		  
				        		   /*var grid = ChargeGrid;
				        		   var models = grid.getStore().getRange();*/
				               }				          
				        }
	                })
	            },{
	                header: 'Total',
	                dataIndex: 'charge_total',
	                anchor: "16%",
	                align: 'right',
	                renderer: 'usMoney',
	                editable: false,
	                editor: new fm.NumberField({
	                    allowBlank: false,
	                    allowNegative: false,
	                    maxValue: 100000
	                })
	            },{
	                header: 'Folio',
	                dataIndex: 'charge_folio',
	                anchor: "16%",
	                editor: new fm.ComboBox({
						  lazyRender: false,
						  store: new Ext.data.ArrayStore({
							  autoDestroy: true,
						      fields: ['id', 'description'],
						      data : [
						              ['Guest', 'Guest'],
						              ['Agency', 'Agency'],
						      ]
						    }),
						    displayField: 'description',
						    valueField: 'id',
							triggerAction: 'all',
							forceSelection: true,
							mode: 'local',
							allowBlank: true
	                })
	            }]
	        });

	        // create the editor grid
	        ChargeGrid = new Ext.grid.EditorGridPanel({
	            store: chargesStore,
	            cm: cm,
	            //renderTo: 'editor-grid',
	            anchor: "99.8%",
	            height: 250,
	            autoExpandColumn: 'item_name', // column with this id will be expanded
	            title: '',
	            frame: true,
	            bodyBorder: false,
	    		border: false,
	            clicksToEdit: 1,
	            viewConfig: { forceFit:true },
	            listeners: 
		        {
		        	'rowcontextmenu': panel.showContextMenuCharges,	
		        	change : function(){
		        		alert("change");
		        	},
		        	click : function(){
		        		// update row charge_total of grid 
		        		var calculate_tax = 0;
		        		if(Ext.getCmp("reservation_ignore_tax").getValue() == "0"){
		        			calculate_tax = 1;
		        		}
		        		
		        		var calculate_tax_serv = 0;//Ext.getCmp("reservation_ignore_service").getValue();
		        		var sum = 0.00;
		        		var taxSum = 0.00;
		        		var servSum = 0.00;
		        		chargesStore.each(function(record,id){				    					
	    					record.set('charge_total',(record.data.charge_qty*record.data.charge_rate));	
	    					sum += (record.data.charge_qty*record.data.charge_rate);
	    					if(record.data.charge_item_name == "Room" || record.data.charge_item_name == "Room NS" || 
	    					   record.data.charge_item_name == "Restaurant" ||record.data.charge_item_name == "Rest/Bar"){
	    						taxSum += (record.data.charge_qty*record.data.charge_rate);
	    					}
	    					/*if(record.data.charge_item_name == "Restaurant" || record.data.charge_item_name == "Rest/Bar"){
	    						servSum += (record.data.charge_qty*record.data.charge_rate);
	    					}*/
	    				});
		        		
		        		if(taxSum > 1){
		        			if(!calculate_tax){
		        			taxSum = (13*taxSum)/100;
		        			}else {
		        				taxSum = 0.00;
		        			}
		        			
		        		}
		        		/*if(servSum > 1){
		        			if(!calculate_tax_serv){
		        			servSum = (10*servSum)/100;
		        			}else {
		        				servSum = 0.00;
		        			}
		        			
		        		}*/        		
		        		
		        		Ext.getCmp("reservation_tax").setValue(Ext.util.Format.number(taxSum, '0.00'));
		        		//Ext.getCmp("services").setValue(Ext.util.Format.number(servSum, '0.00'));
		        		
		        		Ext.getCmp("sub_total").setValue('$'+Ext.util.Format.number(sum, '0.00'));
		        		Ext.getCmp("total_changes").setValue(Ext.util.Format.number((sum+taxSum+servSum), '0.00'));
		        		
		        		var balance = Ext.util.Format.number(((sum+taxSum+servSum) - parseFloat(Ext.getCmp("total_paid").getValue())), '0.00');
		        		Ext.getCmp("balance").setValue(balance);
		        		
		        		//panel.calculateSubTotal(ChargeGrid);
		        	}
		        },
	            tbar: [{
	                text: 'Add Row',
	                handler : function(){
	                	
	                	// access the Record constructor through the grid's store
	                   // var Data = ChargeGrid.getStore().recordType;
	                    var Data = Ext.data.Record.create([
	                                   {name: 'charge_id', mapping : "charge_id", type: 'int'},
	                                   {name: 'charge_reservation_id', mapping : "charge_reservation_id", type: 'int'},
	                                   {name: 'charge_item_name', mapping : "charge_item_name", type: 'string'},
	                                   {name: 'charge_item_desc',  mapping : "charge_item_desc",  type: 'string'},
	                                   {name: 'charge_qty',  mapping : "charge_qty",  type: 'int'},
	                                   {name: 'charge_rate',  mapping : "charge_rate",  type: 'float'},
	                                   {name: 'charge_total',  mapping : "charge_total",  type: 'float'},
	                                   {name: 'charge_folio',  mapping : "charge_folio"},
	                                   {name: 'unique_id',  mapping : "unique_id"},
								                         ]);
	                    var d = new Data({
	                    	charge_id: 	0,
	                    	charge_reservation_id: 	panel.reservation_id,
	                    	charge_item_name: 	'',
	                    	charge_item_desc: 	'',
	                    	charge_qty: 		0,
	                    	charge_rate: 		0,
	                    	charge_total: 		0,
	                    	charge_folio: 		'Guest',
	                    	unique_id: 			panel.uniqueID()	                    	
	                    });
	                    ChargeGrid.stopEditing();
	                    chargesStore.insert(chargesStore.data.length, d);
	                    ChargeGrid.startEditing(chargesStore.data.length, 0);
	                }
	            },
	            '-',
	            {
	                text: 'Refresh',
	                handler : function(){
	                	
	                	if(panel.reservation_id > 0){
	                		panel.loadCharges();
	                		ChargeGrid.fireEvent("click");
	                		Ext.growl.message('Success', 'Refreshed!');
	                	}else {
	                		Ext.growl.message('Error!', 'You must save the reservation information before save a charges.');
	        	    		return false;
	                	}
	                	
	                }
	            }]
	        });

	     
	    		    	
	    	return ChargeGrid;
	    	
	    },
	    calculateSubTotal: function (grid){
	    	sum = 0;
	    	grid.getStore().each(function(record,id){
	    		sum  += record.data.charge_total;
			});	    	
	    	Ext.getCmp("sub_total").setValue('$'+Ext.util.Format.number(sum, '0.00'));	    	
	    },
	    showContextMenuCharges: function(grid, index, event)
		{
			event.stopEvent();
			var panel = this;
			var record = grid.getStore().getAt(index);
			
			var itemsCharges; 
			itemsCharges = new Array({
				text: 'delete Row',
				handler: function() 
				{
					Ext.Ajax.request({params: {unique_id : record.data.unique_id, charge_id : record.data.charge_id},url: _contextPath + '/reservation/deleteCharges',failure: function(response, opts){ return false;}});
					ChargeGrid.store.remove(record);
	
				}
			});
	
			new Ext.menu.Menu(
			{
				items: itemsCharges,
				autoDestroy: true
			}).showAt(event.xy);
				
		},
	    showOccupancy: function()
	    {
			var edithtml = new Ext.form.HtmlEditor({
				xtype: 'htmleditor',
				id: 'edit-note-note',
				name: 'note',
				bodyStyle:'overflowY: auto',
				overflowY: 'auto',
				maximizable: true,
				enableColors: false,
				enableAlignments: false,
				enableSourceEdit: false,
				enableLists: false,
				enableFont: false,
				enableFontSize: false,	
				enableLinks:true,
				defaultValue:'',
				enableFormat:false,
				width: 600,
                height: 300				
			});
			
	    	Ext.QuickTips.init();
	    	var formPanel = new Ext.form.FormPanel({
	    		bodyBorder: false,
	    		border: false,
	    		frame: false,
	    		padding: '10px',
	    		bodyCssClass: 'x-citewrite-panel-body',
	    		layout: {
	                type: 'fit'
	            },
	    		items: [{
	    				xtype: 'hidden',
	    				id: '00id',
	    				name: 'id',
	    				value: 0
				}]
	    	});
	      
	    	var title = "Disponible Rooms";	    	
	    	
	    	var panel = this;
	    	var occupancyWindow = new Ext.Window({
	            renderTo: document.body,
	            title: title,
	            plain: true,
	            resizable: true,
	            autoScroll: true,
	            modal: true,
	            id: 'occupancyWindow',
	            items: formPanel,
	            buttons: [{
	                text:'Select',
	                handler: function()
	                {   
	                	//validate form
	                	/*
	                	formPanel.getForm().submit({
	                	    url: _contextPath + '/owner/notes',
	                	    scope: this,
	                	    params: {xaction: 'save', owner_id: panel.owner.owner_id },
	                	    success: function(form, action) {
	                	    	panel.load({url : _contextPath + '/owner/notes#note-'+action.result.note.owner_note_id, scripts : true, params: {owner_id: panel.owner.owner_id }});
	                	    	
	                	    	var parent = action.options.scope.findParentByType('window'); 
	                	    	parent.close();
	                	       
	                	    	Ext.growl.message('Success', 'Note has been updated.');
	                	    },
	                	    failure: function(form, action) {
	                	        switch (action.failureType) {
	                	            case Ext.form.Action.CLIENT_INVALID:
	                	                Ext.Msg.show({
                	                	   title:'Error',
                	                	   msg: 'Please enter a note.',
                	                	   buttons: Ext.Msg.OK,
                	                	   icon: Ext.MessageBox.ERROR
                	                	});
	                	                break;
	                	            case Ext.form.Action.CONNECT_FAILURE:
	                	                Ext.Msg.show({
                	                	   title:'Failure',
                	                	   msg: 'Ajax communication failed.',
                	                	   buttons: Ext.Msg.OK,
                	                	   icon: Ext.MessageBox.ERROR
                	                	});
	                	                break;
	                	            case Ext.form.Action.SERVER_INVALID:
	                	               Ext.Msg.show({
                	                	   title:'Failure',
                	                	   msg: action.result.msg,
                	                	   buttons: Ext.Msg.OK,
                	                	   icon: Ext.MessageBox.ERROR
                	                	});
	                	                break;
	                	       }
	                	    }
	                	});*/
	                }
	            },{
	                text: 'Close',
	                handler: function(){
	                	this.findParentByType('window').close();
	                }
	            }],
				width: 650,
                height: 350,
				listeners : {
					resize: function(obj,width, height){},
					afterrender: function(obj)	{}				
				}
	        });
	    	
	    	occupancyWindow.show();
	    	occupancyWindow.center();
	    },
	    addGuest: function(){
	    	  guestDialogAdd.setTitle('New Guest');
			  guestFormPanelAdd.getForm().reset();
			  guestTittleCombo.setValue(1);
			  guestMarketCombo.setValue(1);
			  guestCountryCombo.setValue(1);
			  guestTypeCombo.setValue(1);
			  guestDialogAdd.show();
			  
			  guestsStore.baseParams = {'query': ""};
	    	  guestsStore.params = {};
	    	  guestsStore.reload(); 
	    },
	    loadGuestPanel: function ()
		{
	    	
	    	if(typeof guestFormPanelAdd != "undefined"){
	    		guestsStore.baseParams = {'query': ""};
	    		guestsStore.params = {};
	    		guestsStore.reload(); 
	    		//return false;
	    	}
	    	
	    	if(typeof guestFormPanelAdd == "undefined"){
	    	guestTittleCombo = new Ext.form.ComboBox({
			    typeAhead: true,
			    triggerAction: 'all',
			    lazyRender:true,
			    mode: 'local',
				    id: 'guest_title_add',
			    hiddenName: 'guest_title',
			    autoload: true,
			    store: new Ext.data.ArrayStore({
			        id: 0,
			        fields: [
			            'TittleValue',
			            'TittleDisplay'
			        ],
			        data: [[1, 'Mr'],[2, 'Mrs'],[3, 'Miss'],[4, 'Ms'],[5, 'Master'],[6, 'Family'],[7, 'Other']]
			    }),
			    valueField: 'TittleValue',
			    displayField: 'TittleDisplay',
			    fieldLabel: 'Tittle',
		    	anchor:'95%',
                tabIndex: 1,
                allowBlank: false,
                forceSelection: true
			});
			
			guestTypeCombo = new Ext.form.ComboBox({
			    typeAhead: true,
			    triggerAction: 'all',
			    lazyRender:true,
			    mode: 'local',
			    id: 'guest_type_add',
			    hiddenName: 'guest_type',
			    autoload: true,
			    store: new Ext.data.ArrayStore({
			        id: 0,
			        fields: [
			            'TypeValue',
			            'TypeDisplay'
			        ],
			        data: [[1, 'Guest'],[2, 'Group'],[3, 'Other']]
			    }),
			    valueField: 'TypeValue',
			    displayField: 'TypeDisplay',
			    fieldLabel: 'Type',
		    	anchor:'95%',
                tabIndex: 1,
                allowBlank: false,
                forceSelection: true
			});
			
			guestCountryCombo = new Ext.form.ComboBox({
					id: 'guest_country_add',
		    	hiddenName: 'guest_country',
		    	fieldLabel: 'Country',
		    	anchor:'95%',
                tabIndex: 4, 
		    	submitValue: true,
	            lazyRender: false,
	            store: countryStoreForRes,
				displayField:'country_name',
				valueField: 'country_id',
				triggerAction: 'all',
				allowBlank: false,
	            forceSelection: true
			});
								
			guestMarketCombo = new Ext.form.ComboBox({
			    typeAhead: true,
			    triggerAction: 'all',
			    lazyRender:true,
			    mode: 'local',
				    id: 'guest_market_add',
			    autoload: true,
			    hiddenName: 'guest_market',
			    store: new Ext.data.ArrayStore({
			        id: 0,
			        fields: [
			            'MarketValue',
			            'MArketDisplay'
			        ],
			        data: [[1, 'Local'],[2, 'Israeli'],[3, 'International']]
			    }),
			    valueField: 'MarketValue',
			    displayField: 'MArketDisplay',
			    fieldLabel: 'Market',
		    	anchor:'95%',
                tabIndex: 12,
                allowBlank: false,
                forceSelection: true
			});
				
	    	//guest form
				if(typeof guestFormPanelAdd == "undefined"){			
				
					guestFormPanelAdd = new Ext.FormPanel({
				bodyBorder: false,
				border: false,
				frame: false,
				labelAlign: 'top',
				buttonAlign:'center',
				bodyStyle: 'padding: 10px; ',
				autoWidth: true,
				defaults: { width: '95%' },
				bodyCssClass: 'x-citewrite-panel-body',
						id: 'guestFormPanelRes_add',
				items:[
				       {
				            layout:'column',
				            border: false,
				            bodyCssClass: 'x-citewrite-panel-body',
				            items:[
				            {
				                columnWidth:.5,
				                defaultType:'textfield',
				                layout: 'form',
				                border: false,
				                bodyBorder: false,
				                bodyCssClass: 'x-citewrite-panel-body',
				                items: [guestTittleCombo,{
							    	   	id: 'guest_name_add',
							    	   	name: 'guest_name',
							    	   	fieldLabel: 'Name',
					                    anchor:'95%',
					                    allowBlank: false,
						                tabIndex: 2 
							       },
							       {
							    	   id: 'guest_dni_add',
							    	   name: 'guest_dni',
							    	   fieldLabel: 'DNI',
							    	   anchor:'95%',
					                   tabIndex: 3 

							       }, 	
							    	   guestCountryCombo
							       , {
							    	   id: 'guest_address_add',
							    	   name: 'guest_address',
							    	   fieldLabel: 'Address',
							    	   anchor:'95%',
					                   tabIndex: 5 

							       }
							       ]
				            },{
				                columnWidth:.5,
				                layout: 'form',
				                defaultType:'textfield',
				                border: false,
				                bodyBorder: false,
				                bodyCssClass: 'x-citewrite-panel-body',
				                items: [
							       {
							    	   id: 'guest_phone_add',
							    	   fieldLabel: 'Phone',
							    	   name: 'guest_phone',
							    	   allowBlank: false,
							    	   maskRe: /^[0-9]*$/,
							    	   anchor:'95%',
					                   tabIndex: 7 
							       },
							       { 
							    	   id: 'guest_email_add',
							    	   fieldLabel: 'Email',
							    	   name: 'guest_email',
							    	   regex: /^([\w\-\'\-]+)(\.[\w-\'\-]+)*@([\w\-]+\.){1,5}([A-Za-z]){2,4}$/,
							    	   regexText:'This field should be an e-mail address in the format "user@example.com"',
							    	   anchor:'95%',
							    	   allowBlank: false,
					                   tabIndex: 9 
							       }, 
							       guestMarketCombo,
							       guestTypeCombo
							        	]
				            }]
				        },{
				        		id: 'guest_notes_add',
				        		name: 'guest_notes',
				        		fieldLabel: 'Notes',
			                    anchor:'97%',
				                tabIndex: 13,
				                xtype: 'textarea',		
								name: 'guest_notes'
						},
				       {
							   id: 'guest_id_add',
							   name: 'guest_id',
							   xtype: 'hidden',
							   value: '0'
						}]
			});
				}
	    	}
			
			if(typeof guestDialogAdd == "undefined"){		
				guestDialogAdd = new Ext.Window({
                renderTo: document.body,
                layout:'fit',
                width:540,
                height:530,
                closeAction:'hide',
                plain: true,
                resizable: false,
                modal: true,
	                id: 'guestWindow_add',
	                items: guestFormPanelAdd,
                buttons: [{
                    text:'Save',
                    handler: function()
                    {
                    
                    	var guest_name = Ext.getCmp('guest_name_add').getValue();
                    	var guest_address = Ext.getCmp('guest_address_add').getValue();
                    
                    	var guest_phone = Ext.getCmp('guest_phone_add').getValue();
                    	var guest_email = Ext.getCmp('guest_email_add').getValue();
                    
                    	var guest_market = guestMarketCombo.getValue();
                    	var guest_type = guestTypeCombo.getValue();
                     	
                    	
                    	//validate form
	                    	guestFormPanelAdd.getForm().submit({
                    	    url: _contextPath + '/guests/save',
                    	    params: {
                    	        xaction: 'save'
                    	    },
                    	    success: function(form, action) {
                    	    	var response = Ext.decode(action.response.responseText);
                    	    	if(response.success){
                    	    		  if(typeof response.guest_id == "undefined"){
         			        			   
         			        			   Ext.getCmp('reservation_guest_id').setValue(0);													        			   
         			        			   
         				        	   }else {
         				        		  if(response.guest_id > 0){
	         				        		   Ext.getCmp('reservation_guest_id').setValue(response.guest_id);
	         					        	   Ext.getCmp('guest_phone').setValue(guest_phone);
	         					        	   Ext.getCmp('guest_email').setValue(guest_email);
	         					        	   Ext.getCmp('guest_name').setValue(guest_name);
	         					        	   Ext.getCmp('guest_address').setValue(guest_address);
	         					        	   Ext.getCmp('guest_type').hide();
	         				        	  }else {
	    				        			   alert("Error during loading Guest information.");
	    				        		  }
         				        	   }
         			        		   
         			        		   Ext.getCmp('guests-info').show();
	         			        		   guestDialogAdd.hide();
         			        		   guestsStore.reload();
                           	           Ext.growl.message('Success', 'Guest has been saved.');
         			        		   
		            	    	}else {
		            	    		Ext.growl.message('Error', 'An error occurred while saving the Guest. Try again');
		            	    	}
                    	      
                    	    },
                    	    failure: function(form, action) {
                    	        switch (action.failureType) {
                    	            case Ext.form.Action.CLIENT_INVALID:
										Ext.Msg.show({
										   title:'Failure',
										   msg:  'Form fields may not be submitted with invalid values',
										   buttons: Ext.Msg.OK,
										   icon: Ext.MessageBox.ERROR
										});
                    	                break;
                    	            case Ext.form.Action.CONNECT_FAILURE:
                    	            	Ext.Msg.show({
										   title:'Failure',
										   msg:   'Ajax communication failed',
										   buttons: Ext.Msg.OK,
										   icon: Ext.MessageBox.ERROR
										});
                    	                break;
                    	            case Ext.form.Action.SERVER_INVALID:
										Ext.Msg.show({
										   title:'Failure',
										   msg: action.result.msg,
										   buttons: Ext.Msg.OK,
										   icon: Ext.MessageBox.ERROR
										});
                    	       }
                    	    }
                    	});
                    }
                },{
                    text: 'Close',
                    handler: function(){
	                    	guestDialogAdd.hide();
                    }
                }]
            });
			}
	    	
		},
	    addAgency: function(){
	    	agencyFormPanelAdd.getForm().reset();
			agencyCountryCombo.setValue(1);
			agencyTypeCombo.setValue(1);
			agencyDialogAdd.show();
			
			agencyStore.baseParams = {'query': ""};
    		agencyStore.params = {};
        	agencyStore.reload(); 
	    },
	    loadAgencyPanel: function ()
		{
		    if(typeof agencyFormPanelAdd != "undefined"){
	    		agencyStore.baseParams = {'query': ""};
	    		agencyStore.params = {};
            	agencyStore.reload(); 
		    		//return false;
	    	}
		    if(typeof agencyFormPanelAdd == "undefined"){
		    	agencyCountryCombo = new Ext.form.ComboBox({
						id: 'agency_country_add',
			    	hiddenName: 'agency_country',
			    	fieldLabel: 'Country',
			    	anchor:'95%',
	                tabIndex: 3, 
			    	submitValue: true,
		            lazyRender: false,
		            store: countryStoreForRes,
					displayField:'country_name',
					valueField: 'country_id',
					triggerAction: 'all',
					allowBlank: false,
		            forceSelection: true
				});
		    	
		    	agencyTypeCombo = new Ext.form.ComboBox({
				    typeAhead: true,
				    triggerAction: 'all',
				    lazyRender:true,
				    mode: 'local',
					    id: 'agency_type_add',
				    hiddenName: 'agency_type',
				    autoload: true,
				    store: new Ext.data.ArrayStore({
				        id: 0,
				        fields: [
				            'TypeValue',
				            'TypeDisplay'
				        ],
				        data: [[1, 'Agency Tour'],[2, 'Corporation'],[3, 'Independient']]
				    }),
				    valueField: 'TypeValue',
				    displayField: 'TypeDisplay',
				    fieldLabel: 'Type',
			    	anchor:'95%',
	                tabIndex: 10,
	                allowBlank: false,
	                forceSelection: true
				});
	    	
		    	//agency form
					agencyFormPanelAdd = new Ext.FormPanel({
					bodyBorder: false,
					border: false,
					frame: false,
					labelAlign: 'top',
					buttonAlign:'center',
					bodyStyle: 'padding: 10px; ',
					autoWidth: true,
					defaults: { width: '95%' },
					bodyCssClass: 'x-citewrite-panel-body',
						id: 'agencyFormPanelAdd',
					items:[
					       {
					            layout:'column',
					            border: false,
					            bodyCssClass: 'x-citewrite-panel-body',
					            items:[
					            {
					                columnWidth:.5,
					                defaultType:'textfield',
					                layout: 'form',
					                border: false,
					                bodyBorder: false,
					                bodyCssClass: 'x-citewrite-panel-body',
					                items: [{
								    	   	id: 'agency_name_add',
								    	   	fieldLabel: 'Name',
								    	   	name:"agency_name",
						                    anchor:'95%',
						                    allowBlank: false,
							                tabIndex: 1 
								       },
								       {
								    	   id: 'agency_identification_add',
								    	   fieldLabel: 'Corporation ID',
								    	   name:"agency_identification",
								    	   anchor:'95%',
						                   tabIndex: 2 
	
								       }, 	
								    	   agencyCountryCombo
								       , {
								    	   id: 'agency_address_add',
								    	   fieldLabel: 'Address',
								    	   name:"agency_address",
								    	   anchor:'95%',
						                   tabIndex: 4 
	
								       }
								       ]
					            },{
					                columnWidth:.5,
					                layout: 'form',
					                defaultType:'textfield',
					                border: false,
					                bodyBorder: false,
					                bodyCssClass: 'x-citewrite-panel-body',
					                items: [
								       {
								    	   id: 'agency_phone_add',
								    	   name:"agency_phone",
								    	   fieldLabel: 'Phone',
								    	   allowBlank: false,
								    	   anchor:'95%',
						                   tabIndex: 6 
								       },
								       {
								    	   id: 'agency_web_site_add',
								    	   fieldLabel: 'Web Site',
								    	   name:"agency_web_site",
								    	   anchor:'95%',
						                   tabIndex: 7 
								       },{ 
								    	   id: 'agency_email_add',
								    	   fieldLabel: 'Email',
								    	   name:"agency_email",
								    	   regex: /^([\w\-\'\-]+)(\.[\w-\'\-]+)*@([\w\-]+\.){1,5}([A-Za-z]){2,4}$/,
								    	   regexText:'This field should be an e-mail address in the format "user@example.com"',
								    	   anchor:'95%',
								    	   allowBlank: false,
						                   tabIndex: 8 
								       },
								       agencyTypeCombo
								        	]
					            }]
					        },{
					        		id: 'agency_notes_add',
					        		name:"agency_notes",
					        		fieldLabel: 'Notes',
				                    anchor:'97%',
					                tabIndex: 13,
					                xtype: 'textarea',		
									name: 'agency_notes'
							},
					       {
								   id: 'agency_id_add',
								   xtype: 'hidden',
								   name:"agency_id",
								   value: '0'
							}]
				});
		    	}
				
		    	if(typeof agencyDialogAdd == "undefined"){
			    	agencyDialogAdd = new Ext.Window({
	                renderTo: document.body,
	                layout:'fit',
	                width:540,
	                height:490,
	                closeAction:'hide',
	                plain: true,
	                resizable: false,
	                modal: true,
		                id: 'agencyWindowAdd',
		                items: agencyFormPanelAdd,
	                title:"Add Agency",
	                buttons: [{
	                    text:'Save',
	                    handler: function()
	                    {
	                    	var agency_phone = Ext.getCmp('agency_phone_add').getValue();
	                    	var agency_address = Ext.getCmp('agency_address_add').getValue();
	                    	var agency_email = Ext.getCmp('agency_email_add').getValue();
	                    	var agency_name = Ext.getCmp('agency_name_add').getValue();
	                    	var agency_type = agencyTypeCombo.getValue();
	                     	
	                    	
	                    	
	                    	//validate form
		                    	agencyFormPanelAdd.getForm().submit({
	                    	    url: _contextPath + '/agency/save',
	                    	    params: {
	                    	        xaction: 'save'
	                    	    },
	                    	    success: function(form, action) {
	                    	    	var response = Ext.decode(action.response.responseText);
	                    	    	if(response.success){
	                    	    		  if(typeof response.agency_id == "undefined"){
	         			        			   
	         			        			   Ext.getCmp('reservation_agency_id').setValue(0);													        			   
	         			        			   
	         				        	   }else {
	         				        		   if(response.agency_id > 0){
	         				        			   Ext.getCmp('reservation_agency_id').setValue(response.agency_id);
								        		   Ext.getCmp('agency_name').setValue(agency_name);
								        		   Ext.getCmp('agency_address').setValue(agency_address);
								        		   Ext.getCmp('agency_phone').setValue(agency_phone);
								        		   Ext.getCmp('agency_email').setValue(agency_email);
								        		   Ext.getCmp('agency-info').show();
	         				        		   }else {
	         				        			   alert("Error during loading Agency information.");
	         				        		   }
	         				        		   													        		   
	         				        	   }
	         			        		   
		                    	    		  agencyDialogAdd.hide();
	  	                    	    	  Ext.growl.message('Success', 'Agency has been saved.');
	  	                    	    	  agencyStore.reload();
	         			        		   
			            	    	}else {
			            	    		Ext.growl.message('Error', 'An error occurred while saving the Agency. Try again');
			            	    	}
	                    	    },
	                    	    failure: function(form, action) {
	                    	        switch (action.failureType) {
	                    	            case Ext.form.Action.CLIENT_INVALID:
											Ext.Msg.show({
											   title:'Failure',
											   msg:  'Form fields may not be submitted with invalid values',
											   buttons: Ext.Msg.OK,
											   icon: Ext.MessageBox.ERROR
											});
	                    	                break;
	                    	            case Ext.form.Action.CONNECT_FAILURE:
	                    	            	Ext.Msg.show({
											   title:'Failure',
											   msg:   'Ajax communication failed',
											   buttons: Ext.Msg.OK,
											   icon: Ext.MessageBox.ERROR
											});
	                    	                break;
	                    	            case Ext.form.Action.SERVER_INVALID:
											Ext.Msg.show({
											   title:'Failure',
											   msg: action.result.msg,
											   buttons: Ext.Msg.OK,
											   icon: Ext.MessageBox.ERROR
											});
	                    	       }
	                    	    }
	                    	});
	                    }
	                },{
	                    text: 'Close',
	                    handler: function(){
		                    	agencyDialogAdd.hide();
	                    }
	                }]
	            });
		      }
			  agencyFormPanelAdd.getForm().reset();
			  agencyCountryCombo.setValue(1);
			  agencyTypeCombo.setValue(1);
			
	    },
	    
	    uniqueID : function() 
	    {	    	  
	    	//generate unique id
	    	var timestamp = new Date().valueOf();
	    	return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1)+timestamp; 
	    
	    },
	    bindActions: function()
	    {
	    	var panel = this;
	    	var container = Ext.get('owner-notes-'+this.owner.owner_id);
	    	var edits = container.query('.edit');
	    	Ext.each(edits, function(button, index){
	    		button.on("click", function(){
	    			var note_id = this.getAttribute("note-id");
	    			panel.editNote(note_id);
	    		});
	    	});
	    	var deletes = container.query('.delete');
	    	Ext.each(deletes, function(button, index){
	    		button.on("click", function(){
	    			var note_id = this.getAttribute("note-id");
	    			panel.deleteNote(note_id);
	    		});
	    	});
	    	
	    },
	    deleteNote: function(note_id)
	    {
	    	var panel = this;
	    	Ext.MessageBox.confirm("Delete Note?", 'Are you sure you want to delete this note?', function(p1, p2){
				if(p1 != 'no')
				{
					// Basic request
					Ext.Ajax.request({
					   url: _contextPath + '/owner/notes',
					   success: function(response, opts){
						   panel.load({url : _contextPath + '/owner/notes', scripts : true, params: {owner_id: panel.owner.owner_id }});
						   Ext.growl.message('Success!', 'Note has been deleted.');
					   },
					   failure: function(response, opts){
						   Ext.Msg.show({
							   title:'Error!',
							   msg: 'Error deleting note.',
							   buttons: Ext.Msg.OK,
							   icon: Ext.MessageBox.ERROR
							});
					   },
					   params: { note_id: note_id, owner_id: panel.owner.owner_id, xaction: 'delete' }
					});
				}
			});
	    }
});


